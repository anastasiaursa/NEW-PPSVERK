/*
 * üîß 3 –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 * 
 * ‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –í–°–ï –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
 * ‚úÖ smartReplaceColors, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * ‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å—Ç—Ä–æ–∫, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
 * 
 * –ó–∞–≤–∏—Å–∏—Ç –æ—Ç: 1 –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò.js
 * 
 * –í–ê–ñ–ù–û: –í–°–ï –§–£–ù–ö–¶–ò–ò –°–ö–û–ü–ò–†–û–í–ê–ù–´ –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê!
 * –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

console.log('üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ñ–ï–ù–´ –ü–û–õ–ù–û–°–¢–¨–Æ');
console.log('üé® smartReplaceColors –¥–æ—Å—Ç—É–ø–Ω–∞ (–ö–ê–ö –¢–†–ï–ë–û–í–ê–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨)');
console.log('üìä –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ò–î–ï–ù–¢–ò–ß–ù–û–ì–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');

// ========================================================================
// üé® SMARTREPLACECOLORS (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
// ========================================================================

/**
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –¢–†–ï–ë–£–ï–¢ –ò–ú–ï–ù–ù–û –≠–¢–£ –õ–û–ì–ò–ö–£)
 */
function smartReplaceColors() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const lastRow = sheet.getLastRow();
    const lastCol = sheet.getLastColumn();
    
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: ${sheet.getName()}`);
    console.log(`–°—Ç—Ä–æ–∫: ${lastRow}, –°—Ç–æ–ª–±—Ü–æ–≤: ${lastCol}`);
    
    if (lastRow <= 1 || lastCol <= 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const range = sheet.getRange(1, 1, lastRow, lastCol);
    const values = range.getValues();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let row = 0; row < lastRow; row++) {
      const cellA = values[row][0];
      if (!cellA) continue;
      
      const cellText = cellA.toString().trim();
      let color = getColorForText(cellText);
      
      if (color) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –ë—Ä–µ–Ω–¥+–ì–µ–æ
        if (isBrandGeoSummary(cellText)) {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Ä–µ–Ω–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ë—Ä–µ–Ω–¥+–ì–µ–æ: "${cellText}"`);
          // –°—Ç–æ–ª–±–µ—Ü A (–±—Ä–µ–Ω–¥) —Ç–µ–º–Ω–µ–µ
          sheet.getRange(row + 1, 1).setBackground('#c9b3d9'); // –¢–µ–º–Ω—ã–π —Å–∏—Ä–µ–Ω–µ–≤—ã–π
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–±—Ä–µ–Ω–¥+–≥–µ–æ) —Å–≤–µ—Ç–ª–µ–µ
          if (lastCol > 1) {
            sheet.getRange(row + 1, 2, 1, lastCol - 1).setBackground('#f0ecf5'); // –°–≤–µ—Ç–ª—ã–π —Å–∏—Ä–µ–Ω–µ–≤—ã–π
          }
          // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏—Ä–µ–Ω–µ–≤—ã—Ö —Ñ–æ–Ω–æ–≤
          sheet.getRange(row + 1, 1, 1, lastCol).setFontColor('#000000');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç
        else if (needsGradient(cellText)) {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è: "${cellText}"`);
          // –°—Ç–æ–ª–±–µ—Ü A —Ç–µ–º–Ω–µ–µ
          sheet.getRange(row + 1, 1).setBackground(getDarkColor(color));
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–µ—Ç–ª–µ–µ
          if (lastCol > 1) {
            sheet.getRange(row + 1, 2, 1, lastCol - 1).setBackground(getLightColor(color));
          }
          
          // –°—Ç–∞–≤–∏–º —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ñ–æ–Ω–æ–≤
          if (color === '#ffffff' || color === '#d9d2e9' || color === '#f4e6ed') {
            sheet.getRange(row + 1, 1, 1, lastCol).setFontColor('#000000');
          }
        } else {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏: "${cellText}" - ${color}`);
          // –í—Å—è —Å—Ç—Ä–æ–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è
          sheet.getRange(row + 1, 1, 1, lastCol).setBackground(color);
          
          // –î–ª—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ —Å—Ç–∞–≤–∏–º —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          if (color === '#ffffff') {
            sheet.getRange(row + 1, 1, 1, lastCol).setFontColor('#000000');
          }
        }
      }
    }
    
    // –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ä–æ—Å—Ç–∞
    colorizeGrowthText(sheet, values, lastRow, lastCol);
    
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
 */
function getColorForText(text) {
  const lower = text.toLowerCase();
  
  console.log(`üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è: "${text}"`);
  
  // 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ—Å—è—Ü–µ–≤ (—Å–æ–¥–µ—Ä–∂–∞—Ç –≥–æ–¥)
  if (/\d{4}/.test(text) && (text.includes('2024') || text.includes('2025') || text.includes('2026'))) {
    console.log(`üìÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞: ${text}`);
    return '#7f9cb9'; // –°–∏–Ω–∏–π
  }
  
  // 2. –°—Ç—Ä–æ–∫–∏ "–í—Å–µ–≥–æ"
  if (/^(–≤—Å–µ–≥–æ|–∏—Ç–æ–≥–æ|total)$/i.test(lower)) {
    console.log(`üìä –°—Ç—Ä–æ–∫–∞ "–í—Å–µ–≥–æ": ${text}`);
    return '#d9e1f2'; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
  }
  
  // 3. –°—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ –∏ "–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ" - –ë–ï–õ–´–ï!
  if (lower === '—Ä–æ—Å—Ç / –ø–∞–¥–µ–Ω–∏–µ' || 
      lower === '—Ä–æ—Å—Ç / –ø–∞–¥–µ–Ω–∏–µ %' || 
      lower === '–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ' ||
      /^–≤\s+–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ/i.test(text) ||
      lower.includes('—Ä–æ—Å—Ç') || 
      lower.includes('–ø–∞–¥–µ–Ω–∏–µ')) {
    console.log(`üìà –°—Ç—Ä–æ–∫–∞ —Ä–æ—Å—Ç–∞: ${text}`);
    return '#ffffff'; // –ë–µ–ª—ã–π
  }
  
  // 4. –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü
  if (isTableHeader(lower)) {
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: ${text}`);
    return '#b8cce4'; // –°—Ä–µ–¥–Ω–µ-–≥–æ–ª—É–±–æ–π
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ë—Ä–µ–Ω–¥+–ì–µ–æ
  if (isBrandGeoSummary(text)) {
    console.log(`üéØ –ë—Ä–µ–Ω–¥+–ì–µ–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 6. –ë—Ä–µ–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ)
  if (isBrand(lower)) {
    console.log(`üè¢ –ë—Ä–µ–Ω–¥: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 7. –ì–ï–û —Å—Ç—Ä–æ–∫–∏
  if (isGeo(text)) {
            console.log(`–ì–ï–û —Å—Ç—Ä–æ–∫–∞: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 8. –°–µ–æ—à–Ω–∏–∫–∏
  if (isSeo(text)) {
    console.log(`üë§ –°–µ–æ—à–Ω–∏–∫: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 9. –ü–æ–¥–≥—Ä—É–ø–ø—ã (—Å–≤–æ–¥–Ω—ã–µ)
  if (lower.includes('—Å–≤–æ–¥–Ω–∞—è') || text.includes('/')) {
    console.log(`üìÅ –°–≤–æ–¥–Ω–∞—è/–ø–æ–¥–≥—Ä—É–ø–ø–∞: ${text}`);
    return '#f4e6ed'; // –°–≤–µ—Ç–ª—ã–π —Ä–æ–∑–æ–≤—ã–π
  }
  
  // 10. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –±–µ–ª–æ–µ
  console.log(`‚ö™ –ë–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${text}`);
  return '#ffffff';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç (—Ç–µ–º–Ω–µ–µ A, —Å–≤–µ—Ç–ª–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
 */
function needsGradient(text) {
  const lower = text.toLowerCase();
  
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç –ù–ï –Ω—É–∂–µ–Ω –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –ë—Ä–µ–Ω–¥+–ì–µ–æ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (isBrandGeoSummary(text)) {
    return false;
  }
  
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤, –≥–µ–æ –∏ —Å–µ–æ—à–Ω–∏–∫–æ–≤
  return isBrand(lower) || isGeo(text) || isSeo(text);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ë—Ä–µ–Ω–¥+–ì–µ–æ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: "–ì–ï–û –ë–†–ï–ù–î", "–ì–ï–û / –ì–ï–û –ë–†–ï–ù–î", "–ë—Ä–µ–Ω–¥+–ì–ï–û"
 */
function isBrandGeoSummary(text) {
  const cleanText = text.trim();
  
  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ë—Ä–µ–Ω–¥+–ì–µ–æ: "${cleanText}"`);
  
  // –§–æ—Ä–º–∞—Ç "–ë—Ä–µ–Ω–¥+–ì–ï–û" (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  if (cleanText.includes('+')) {
    const parts = cleanText.split('+');
    if (parts.length === 2) {
      const part1 = parts[0].trim().toLowerCase();
      const part2 = parts[1].trim().toLowerCase();
      
      if ((isBrand(part1) && isGeoCode(part2)) || 
          (isGeoCode(part1) && isBrand(part2))) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–±—Ä–µ–Ω–¥+–≥–µ–æ": ${cleanText}`);
        return true;
      }
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "–ì–ï–û / –ì–ï–û –ë–†–ï–ù–î" (–Ω–∞–ø—Ä–∏–º–µ—Ä "IN / UZ PinUp")
  if (cleanText.includes(' / ') && cleanText.includes(' ')) {
    const parts = cleanText.split(' ');
    if (parts.length >= 4) { // –º–∏–Ω–∏–º—É–º "XX / XX Brand"
      const geoPart1 = parts[0].toLowerCase();
      const geoPart2 = parts[2].toLowerCase();
      const brandPart = parts.slice(3).join(' ').toLowerCase();
      
      if (isGeoCode(geoPart1) && isGeoCode(geoPart2) && isBrand(brandPart)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–≥–µ–æ / –≥–µ–æ –±—Ä–µ–Ω–¥": ${cleanText}`);
        return true;
      }
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "–ì–ï–û –ë–†–ï–ù–î" (–Ω–∞–ø—Ä–∏–º–µ—Ä "HU Mostbet", "AZ 1win")
  if (cleanText.includes(' ')) {
    const parts = cleanText.split(' ');
    
    if (parts.length >= 2) {
      const geoPart = parts[0].toLowerCase();
      const brandPart = parts.slice(1).join(' ').toLowerCase();
      
      if (isGeoCode(geoPart) && isBrand(brandPart)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–≥–µ–æ –±—Ä–µ–Ω–¥": ${cleanText}`);
        return true;
      }
    }
  }
  
  console.log(`‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ë—Ä–µ–Ω–¥+–ì–µ–æ: ${cleanText}`);
  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö)
 */
function isGeoCode(text) {
  const geoCodes = [
    'az', 'ru', 'uz', 'kz', 'by', 'ua', 'ge', 'am', 'md', 'tj', 'kg', 'tm', 'hu',
    'tr', 'bd', 'np', 'in', 'ar', 'fr', 'kr', 'ww', 'ug', 'ec', 'ga', 'es', 'br',
    'cm', 'ke', 'sn', 'pe', 'jp', 'ca', 'bg', 'ch', 'co', 'pl', 'cl', 'eg', 'it',
    'gr', 'de', 'sk', 'lk', 'pt', 'ng', 'mx', 'vn', 'tz', 'za', 'mz', 'pk', 'cz'
  ];
  const result = geoCodes.includes(text.toLowerCase());
  if (result) {
    console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –≥–µ–æ-–∫–æ–¥: ${text}`);
  }
  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–∞–±–ª–∏—Ü—ã
 */
function isTableHeader(lower) {
  const keywords = ['–æ—Ñ—Ñ–µ—Ä', '—Å–∞–π—Ç—ã', '—Å–µ–æ—à–Ω–∏–∫', '–∫–ª–∏–∫–∏', '—Ä–µ–≥–∏', 'deps', '–≤—ã—Ä—É—á–∫–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'fd', 'rd'];
  return keywords.some(word => lower.includes(word)) && 
         !lower.includes('—Ä–æ—Å—Ç') && 
         !lower.includes('–ø–∞–¥–µ–Ω–∏–µ');
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±—Ä–µ–Ω–¥–æ–º (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö)
 */
function isBrand(lower) {
  const brands = [
    'glory', 'profitpoint', 'pinup', 'pin-up', 'banzai', '1win', '22bet', 'hellspin', 
    'ivibet', 'elon', '888starz', 'weiss', 'linebet', 'betmatch', '–ø–∞—Ä–∏',
    '—Ñ–æ–Ω–±–µ—Ç', '–±–µ—Ç—Å–∏—Ç–∏', '1xbet', 'advertise', 'joycasino', 'casinox',
    'melbet', 'aslan', 'casino', '7slots.casino', 'ice casino', 'mostbet',
    'bilbet', 'bons', 'betwinner', 'platinum casino', 'leon', 'booi casino',
    'aslan casino', 'aslan —Åasino'
  ];
  
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –±—Ä–µ–Ω–¥ + 2-3 –±—É–∫–≤—ã
  for (const brand of brands) {
    if (lower === brand) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –±—Ä–µ–Ω–¥: ${lower}`);
      return true;
    }
    if (lower.startsWith(brand + ' ') && /^[a-z–∞-—è]{2,3}$/.test(lower.substring(brand.length + 1))) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –±—Ä–µ–Ω–¥ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º: ${lower}`);
      return true;
    }
    if (lower.startsWith(brand) && /^[a-z–∞-—è]{2,3}$/.test(lower.substring(brand.length))) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –±—Ä–µ–Ω–¥ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º: ${lower}`);
      return true;
    }
  }
  
  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ì–ï–û —Å—Ç—Ä–æ–∫–æ–π
 */
function isGeo(text) {
  // –û–ë–ù–û–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –ì–ï–û –∫–æ–¥–æ–≤
  const geoPatterns = [
    // –û–¥–∏–Ω–æ—á–Ω—ã–µ –ì–ï–û –∫–æ–¥—ã
    /^AZ$/i, /^RU$/i, /^UZ$/i, /^KZ$/i, /^BY$/i,
    /^UA$/i, /^GE$/i, /^AM$/i, /^MD$/i, /^TJ$/i,
    /^KG$/i, /^TM$/i, /^HU$/i, /^[A-Z]{2}$/i,
    
    // –°–æ—Å—Ç–∞–≤–Ω—ã–µ –ì–ï–û –∫–æ–¥—ã —Ç–∏–ø–∞ "UZ / AZ" –∏–ª–∏ "–öR / JP"
    /^[A-Z]{2}\s*\/\s*[A-Z]{2}$/i,        // XX / YY —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –±–µ–∑
    /^[–ê-–Ø]{2}\s*\/\s*[A-Z]{2}$/i,        // –öR / JP (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
    /^[A-Z]{2}\s*\/\s*[–ê-–Ø]{2}$/i,        // XX / –£–ö (–ª–∞—Ç–∏–Ω–∏—Ü–∞ + –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
    /^[–ê-–Ø]{2}\s*\/\s*[–ê-–Ø]{2}$/i         // –£–ö / –†–£ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
  ];
  
  return geoPatterns.some(pattern => pattern.test(text.trim()));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–æ—à–Ω–∏–∫–æ–º
 */
function isSeo(text) {
  if (/^üë§\s*/.test(text) || /^‚ö†Ô∏è\s*/.test(text)) return true;
  
  const seoNames = [
    '–º–∏—Ö–∞–∏–ª', '–∞–Ω–∞—Å—Ç–∞—Å–∏—è', 'alex se', '–≤–∏–∫—Ç–æ—Ä', '—ç–º–∏–ª—å', '–∫–∏—Ä–∏–ª–ª', 
    '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä –∞—Ä—Ç—é—Ö', '–º–∞–π–¥–∞', '–µ–≤–≥–µ–Ω–∏—è'
  ];
  
  const clean = text.toLowerCase().replace(/^(üë§|‚ö†Ô∏è)\s*/, '').replace(/\s*\(–∏—Å–∫–ª—é—á–µ–Ω\)$/, '');
  return seoNames.includes(clean);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ü–≤–µ—Ç–∞
 */
function getDarkColor(color) {
  const map = {
    '#d9d2e9': '#c9b3d9', // –°–∏—Ä–µ–Ω–µ–≤—ã–π -> —Ç–µ–º–Ω–µ–µ
    '#f4e6ed': '#e6c9d6', // –†–æ–∑–æ–≤—ã–π -> —Ç–µ–º–Ω–µ–µ
    '#ffffff': '#f0f0f0'  // –ë–µ–ª—ã–π -> —Å–µ—Ä—ã–π
  };
  return map[color] || color;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ—Ç–ª—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ü–≤–µ—Ç–∞
 */
function getLightColor(color) {
  const map = {
    '#d9d2e9': '#f0ecf5', // –°–∏—Ä–µ–Ω–µ–≤—ã–π -> —Å–≤–µ—Ç–ª–µ–µ
    '#f4e6ed': '#faf3f7', // –†–æ–∑–æ–≤—ã–π -> —Å–≤–µ—Ç–ª–µ–µ
    '#ffffff': '#ffffff'  // –ë–µ–ª—ã–π –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–ª—ã–º
  };
  return map[color] || color;
}

/**
 * –û–∫—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ä–æ—Å—Ç–∞
 */
function colorizeGrowthText(sheet, values, lastRow, lastCol) {
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  const headerRow = values[0];
  const growthColumns = [];
  
  for (let col = 0; col < lastCol; col++) {
    const header = headerRow[col] ? headerRow[col].toString().toLowerCase().trim() : '';
    
    if (header.includes('—Ä–æ—Å—Ç') && (header.includes('–ø–∞–¥–µ–Ω–∏–µ') || header.includes('%'))) {
      growthColumns.push(col);
    }
  }
  
  // –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
  for (const col of growthColumns) {
    for (let row = 1; row < lastRow; row++) { // –ù–∞—á–∏–Ω–∞–µ–º —Å 1, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const cellValue = values[row][col];
      
      if (cellValue === null || cellValue === undefined || cellValue === '') {
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const numericValue = parseFloat(cellValue.toString().replace(/[^\-\d.,]/g, '').replace(',', '.'));
      
      if (isNaN(numericValue)) {
        continue;
      }
      
      const cell = sheet.getRange(row + 1, col + 1);
      
      if (numericValue > 0) {
        cell.setFontColor('#00AA00'); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
      } else if (numericValue < 0) {
        cell.setFontColor('#FF0000'); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
      } else {
        cell.setFontColor('#000000'); // –ß–µ—Ä–Ω—ã–π –¥–ª—è –Ω—É–ª—è
      }
    }
  }
  
  if (growthColumns.length > 0) {
    console.log(`–û–∫—Ä–∞—à–µ–Ω —Ç–µ–∫—Å—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ä–æ—Å—Ç–∞: ${growthColumns.length}`);
  }
}

// ========================================================================
// üìä –ì–†–£–ü–ü–ò–†–û–í–ö–ê –î–ê–ù–ù–´–• (–ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
// ========================================================================

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±—Ä–µ–Ω–¥–∞–º (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function groupData(mainData, sitesData) {
  const grouped = {};
  
  mainData.forEach(item => {
    const brandKey = item.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const brandGeoKey = item.brandGeo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const streamKey = item.stream || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const seoKey = item.seoSpecialist || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    if (!grouped[brandKey]) {
      grouped[brandKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        brandGeos: {},
        seoSpecialists: new Set(),
        allSites: new Set()
      };
    }
    
    if (!grouped[brandKey].brandGeos[brandGeoKey]) {
      grouped[brandKey].brandGeos[brandGeoKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        streams: {},
        seoSpecialists: new Set(),
        allSites: new Set()
      };
    }
    
    if (!grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey]) {
      grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        seos: {},
        sites: [],
        seoSpecialists: new Set(),
        allSites: new Set()
      };
    }
    
    if (!grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].seos[seoKey]) {
      grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].seos[seoKey] = {
        clicks: 0,
        registrations: 0,
        fd: 0,
        rd: 0,
        deposits: 0,
        revenueUSD: 0,
        sitesCount: 0,
        seoCount: 1, // –û–¥–∏–Ω —Å–µ–æ—à–Ω–∏–∫ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        allSites: new Set()
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–æ—à–Ω–∏–∫–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
    if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoKey)) {
      grouped[brandKey].seoSpecialists.add(seoKey);
      grouped[brandKey].brandGeos[brandGeoKey].seoSpecialists.add(seoKey);
      grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].seoSpecialists.add(seoKey);
    }
    
    // –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
    const levels = [
      grouped[brandKey].data,
      grouped[brandKey].brandGeos[brandGeoKey].data,
      grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].data,
      grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].seos[seoKey]
    ];
    
    levels.forEach(level => {
      level.clicks += item.clicks;
      level.registrations += item.registrations;
      level.fd += item.fd;
      level.rd += item.rd;
      level.deposits += item.deposits;
      level.revenueUSD += item.revenueUSD;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–∞—Ö (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É)
    if (item.identifier && sitesData[item.identifier]) {
      const uniqueSites = new Map();
      
      sitesData[item.identifier].forEach(site => {
        const siteKey = `${site.site}-${item.identifier}`;
        if (!uniqueSites.has(siteKey)) {
          uniqueSites.set(siteKey, {
            stream: streamKey,
            site: site.site,
            seoSpecialist: site.seoSpecialist,
            identifier: item.identifier,
            clicks: site.clicks
          });
        }
      });
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
      if (!grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed) {
        grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed = new Set();
      }
      
      uniqueSites.forEach(siteInfo => {
        const siteStreamKey = `${siteInfo.site}-${item.identifier}-${streamKey}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
        if (!grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed.has(siteStreamKey)) {
          grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].sites.push(siteInfo);
          grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed.add(siteStreamKey);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç—ã –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
          const siteKey = `${siteInfo.site}-${item.identifier}`;
          grouped[brandKey].allSites.add(siteKey);
          grouped[brandKey].brandGeos[brandGeoKey].allSites.add(siteKey);
          grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].allSites.add(siteKey);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ–æ—à–Ω–∏–∫—É
          if (siteInfo.seoSpecialist === seoKey) {
            grouped[brandKey].brandGeos[brandGeoKey].streams[streamKey].seos[seoKey].allSites.add(siteKey);
          }
        }
      });
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤ –∏ —Å–∞–π—Ç–æ–≤
  Object.values(grouped).forEach(brand => {
    brand.data.seoCount = brand.seoSpecialists.size;
    brand.data.sitesCount = brand.allSites.size;
    
    Object.values(brand.brandGeos).forEach(brandGeo => {
      brandGeo.data.seoCount = brandGeo.seoSpecialists.size;
      brandGeo.data.sitesCount = brandGeo.allSites.size;
      
      Object.values(brandGeo.streams).forEach(stream => {
        stream.data.seoCount = stream.seoSpecialists.size;
        stream.data.sitesCount = stream.allSites.size;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–æ—à–Ω–∏–∫–∞
        Object.values(stream.seos).forEach(seo => {
          seo.sitesCount = seo.allSites ? seo.allSites.size : 0;
        });
      });
    });
  });
  
  return grouped;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ì–ï–û (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function groupGeoData(mainData, sitesData) {
  const grouped = {};
  
  mainData.forEach(item => {
    const geoKey = item.geo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const geoBrandKey = `${geoKey}_${item.brand}`;
    const streamKey = item.stream || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const seoKey = item.seoSpecialist || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ì–ï–û
    if (!grouped[geoKey]) {
      grouped[geoKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        geoBrands: {},
        seoSpecialists: new Set(),
        allSites: new Set()
      };
    }
    
    if (!grouped[geoKey].geoBrands[geoBrandKey]) {
      grouped[geoKey].geoBrands[geoBrandKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        streams: {},
        seoSpecialists: new Set(),
        allSites: new Set()
      };
    }
    
    if (!grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey]) {
      grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        seos: {},
        sites: [],
        seoSpecialists: new Set(),
        allSites: new Set()
      };
    }
    
    if (!grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].seos[seoKey]) {
      grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].seos[seoKey] = {
        clicks: 0,
        registrations: 0,
        fd: 0,
        rd: 0,
        deposits: 0,
        revenueUSD: 0,
        sitesCount: 0,
        seoCount: 1,
        allSites: new Set()
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–æ—à–Ω–∏–∫–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoKey)) {
      grouped[geoKey].seoSpecialists.add(seoKey);
      grouped[geoKey].geoBrands[geoBrandKey].seoSpecialists.add(seoKey);
      grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].seoSpecialists.add(seoKey);
    }
    
    // –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
    const levels = [
      grouped[geoKey].data,
      grouped[geoKey].geoBrands[geoBrandKey].data,
      grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].data,
      grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].seos[seoKey]
    ];
    
    levels.forEach(level => {
      level.clicks += item.clicks;
      level.registrations += item.registrations;
      level.fd += item.fd;
      level.rd += item.rd;
      level.deposits += item.deposits;
      level.revenueUSD += item.revenueUSD;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–∞—Ö
    if (item.identifier && sitesData[item.identifier]) {
      const uniqueSites = new Map();
      
      sitesData[item.identifier].forEach(site => {
        const siteKey = `${site.site}-${item.identifier}`;
        if (!uniqueSites.has(siteKey)) {
          uniqueSites.set(siteKey, {
            stream: streamKey,
            site: site.site,
            seoSpecialist: site.seoSpecialist,
            identifier: item.identifier,
            clicks: site.clicks
          });
        }
      });
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
      if (!grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].sitesProcessed) {
        grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].sitesProcessed = new Set();
      }
      
      uniqueSites.forEach(siteInfo => {
        const siteStreamKey = `${siteInfo.site}-${item.identifier}-${streamKey}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
        if (!grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].sitesProcessed.has(siteStreamKey)) {
          grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].sites.push(siteInfo);
          grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].sitesProcessed.add(siteStreamKey);
          
          const siteKey = `${siteInfo.site}-${item.identifier}`;
          grouped[geoKey].allSites.add(siteKey);
          grouped[geoKey].geoBrands[geoBrandKey].allSites.add(siteKey);
          grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].allSites.add(siteKey);
          
          if (siteInfo.seoSpecialist === seoKey) {
            grouped[geoKey].geoBrands[geoBrandKey].streams[streamKey].seos[seoKey].allSites.add(siteKey);
          }
        }
      });
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤ –∏ —Å–∞–π—Ç–æ–≤
  Object.values(grouped).forEach(geo => {
    geo.data.seoCount = geo.seoSpecialists.size;
    geo.data.sitesCount = geo.allSites.size;
    
    Object.values(geo.geoBrands).forEach(geoBrand => {
      geoBrand.data.seoCount = geoBrand.seoSpecialists.size;
      geoBrand.data.sitesCount = geoBrand.allSites.size;
      
      Object.values(geoBrand.streams).forEach(stream => {
        stream.data.seoCount = stream.seoSpecialists.size;
        stream.data.sitesCount = stream.allSites.size;
        
        Object.values(stream.seos).forEach(seo => {
          seo.sitesCount = seo.allSites ? seo.allSites.size : 0;
        });
      });
    });
  });
  
  return grouped;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ü–æ —Å–µ–æ—à–Ω–∏–∫–∞–º.js)
 */
function groupSeoData(mainData, sitesData) {
  const grouped = {};
  
  mainData.forEach(item => {
    const seoKey = item.seoSpecialist || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const brandGeoKey = item.brandGeo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const streamKey = item.stream || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ–æ—à–Ω–∏–∫–æ–≤
    if (!grouped[seoKey]) {
      grouped[seoKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        isExcluded: –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoKey),
        brandGeos: {}
      };
    }
    
    if (!grouped[seoKey].brandGeos[brandGeoKey]) {
      grouped[seoKey].brandGeos[brandGeoKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        streams: {}
      };
    }
    
    if (!grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey]) {
      grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey] = {
        data: {
          clicks: 0,
          registrations: 0,
          fd: 0,
          rd: 0,
          deposits: 0,
          revenueUSD: 0,
          sitesCount: 0,
          seoCount: 0
        },
        sites: []
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const levels = [
      grouped[seoKey].data,
      grouped[seoKey].brandGeos[brandGeoKey].data,
      grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey].data
    ];
    
    levels.forEach(level => {
      level.clicks += item.clicks;
      level.registrations += item.registrations;
      level.fd += item.fd;
      level.rd += item.rd;
      level.deposits += item.deposits;
      level.revenueUSD += item.revenueUSD;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç—ã
    if (item.identifier && sitesData[item.identifier]) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
      if (!grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed) {
        grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed = new Set();
      }
      
      sitesData[item.identifier].forEach(site => {
        const siteStreamKey = `${site.site}-${item.identifier}-${streamKey}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
        if (!grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed.has(siteStreamKey)) {
          grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey].sites.push({
            site: site.site,
            seoSpecialist: site.seoSpecialist,
            clicks: site.clicks
          });
          grouped[seoKey].brandGeos[brandGeoKey].streams[streamKey].sitesProcessed.add(siteStreamKey);
        }
      });
    }
  });
  
  return grouped;
}

// ========================================================================
// üìã –°–û–ó–î–ê–ù–ò–ï –õ–ò–°–¢–û–í (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
// ========================================================================

/**
 * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å–≤–æ–¥–Ω–æ–π –ø–æ –±—Ä–µ–Ω–¥–∞–º (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function createSummarySheet(tableId, groupedData, monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    createHeaders(sheet, monthName);
    
    let currentRow = 3;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–í—Å–µ–≥–æ"
    const totalData = calculateTotalData(groupedData);
    addTotalRow(sheet, currentRow, totalData);
    currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –ø–æ –¥–æ—Ö–æ–¥—É
    const sortedBrands = Object.entries(groupedData)
      .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
    
    sortedBrands.forEach(([brandKey, brandData]) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –±—Ä–µ–Ω–¥–∞ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è)
      addBrandRow(sheet, currentRow, brandKey, brandData.data, totalData);
      currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
      
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—Ä–µ–Ω–¥–∞ (–ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ –±—Ä–µ–Ω–¥–∞)
      const brandContentStart = currentRow;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ë—Ä–µ–Ω–¥+–ì–µ–æ
      const sortedBrandGeos = Object.entries(brandData.brandGeos)
        .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
      
      sortedBrandGeos.forEach(([brandGeoKey, brandGeoData]) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ë—Ä–µ–Ω–¥+–ì–µ–æ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è)
        addBrandGeoRow(sheet, currentRow, brandGeoKey, brandGeoData.data, brandData.data);
        currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—Ä–µ–Ω–¥+–≥–µ–æ (–ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ –±—Ä–µ–Ω–¥+–≥–µ–æ)  
        const brandGeoContentStart = currentRow;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        const sortedStreams = Object.entries(brandGeoData.streams)
          .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
        
        sortedStreams.forEach(([streamKey, streamData]) => {
          addStreamRow(sheet, currentRow, streamKey, streamData.data, brandGeoData.data);
          currentRow++;
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–æ—à–Ω–∏–∫–æ–≤
          const sortedSeos = Object.entries(streamData.seos)
            .sort(([,a], [,b]) => b.revenueUSD - a.revenueUSD);
          
          sortedSeos.forEach(([seoKey, seoData]) => {
            addSeoRow(sheet, currentRow, seoKey, seoData, streamData.data);
            currentRow++;
          });
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–π—Ç—ã
          const sortedSites = streamData.sites
            .sort((a, b) => b.clicks - a.clicks);
          
          sortedSites.forEach(site => {
            addSiteRow(sheet, currentRow, site, streamData.data);
            currentRow++;
          });
        });
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ë—Ä–µ–Ω–¥+–ì–µ–æ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
        if (brandGeoContentStart <= currentRow - 1) {
          groupBrandGeoContent(sheet, brandGeoContentStart, currentRow - 1);
        }
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—Ä–µ–Ω–¥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
      if (brandContentStart <= currentRow - 1) {
        groupBrandContent(sheet, brandContentStart, currentRow - 1);
      }
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    finalizeSummarySheet(sheet);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å–≤–æ–¥–Ω–æ–π –ø–æ –ì–ï–û (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function createGeoSummarySheet(tableId, groupedData, monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    createHeaders(sheet, monthName);
    
    let currentRow = 3;
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
    const totalData = calculateTotalGeoData(groupedData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–í—Å–µ–≥–æ"
    addTotalRow(sheet, currentRow, totalData);
    currentRow += 3;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ì–ï–û
    Object.entries(groupedData)
      .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD)
      .forEach(([geoKey, geoData]) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ì–ï–û (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è, –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: —Å —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω)
        const geoDisplayName = –ø–æ–ª—É—á–∏—Ç—å–°—Ç—Ä–∞–Ω—É(geoKey);
        addGeoRow(sheet, currentRow, geoDisplayName, geoData.data, totalData);
        currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ì–ï–û (–ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ –ì–ï–û)
        const geoContentStart = currentRow;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ì–ï–û+–ë—Ä–µ–Ω–¥
        Object.entries(geoData.geoBrands)
          .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD)
          .forEach(([geoBrandKey, geoBrandData]) => {
            // –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ì–ï–û+–ë—Ä–µ–Ω–¥
            const geoBrandDisplayName = `${geoDisplayName} ${geoBrandKey.split('_')[1] || ''}`;
            addGeoBrandRow(sheet, currentRow, geoBrandDisplayName, geoBrandData.data, geoData.data);
            currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ì–ï–û+–ë—Ä–µ–Ω–¥ (–ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ –ì–ï–û+–ë—Ä–µ–Ω–¥)
            const geoBrandContentStart = currentRow;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            Object.entries(geoBrandData.streams)
              .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD)
              .forEach(([streamKey, streamData]) => {
                addStreamRow(sheet, currentRow, streamKey, streamData.data, geoBrandData.data);
                currentRow++;
                
                Object.entries(streamData.seos)
                  .sort(([,a], [,b]) => b.revenueUSD - a.revenueUSD)
                  .forEach(([seoKey, seoData]) => {
                    addSeoRow(sheet, currentRow, seoKey, seoData, streamData.data);
                    currentRow++;
                  });
                
                streamData.sites
                  .sort((a, b) => b.clicks - a.clicks)
                  .forEach(site => {
                    addSiteRow(sheet, currentRow, site, streamData.data);
                    currentRow++;
                  });
              });
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ì–ï–û+–ë—Ä–µ–Ω–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
            if (geoBrandContentStart <= currentRow - 1) {
              groupBrandGeoContent(sheet, geoBrandContentStart, currentRow - 1);
            }
          });
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ì–ï–û (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
        if (geoContentStart <= currentRow - 1) {
          groupBrandContent(sheet, geoContentStart, currentRow - 1);
        }
      });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    finalizeSummarySheet(sheet);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ì–ï–û:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å–≤–æ–¥–Ω–æ–π –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ü–æ —Å–µ–æ—à–Ω–∏–∫–∞–º.js)
 */
function createSeoSummarySheet(tableId, groupedData, monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    createHeaders(sheet, monthName);
    
    let currentRow = 3;
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏ (–í–ö–õ–Æ–ß–ê–Ø –í–°–ï–• —Å–µ–æ—à–Ω–∏–∫–æ–≤ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–≤–æ–¥–Ω—ã–º–∏)
    const totalData = calculateTotalData(groupedData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–í—Å–µ–≥–æ"
    addTotalRow(sheet, currentRow, totalData);
    currentRow += 3;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–æ—à–Ω–∏–∫–æ–≤
    Object.entries(groupedData)
      .sort(([,a], [,b]) => {
        // –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ–æ—à–Ω–∏–∫–∏ –≤ –∫–æ–Ω–µ—Ü
        if (a.isExcluded && !b.isExcluded) return 1;
        if (!a.isExcluded && b.isExcluded) return -1;
        return b.data.revenueUSD - a.data.revenueUSD;
      })
      .forEach(([seoKey, seoData]) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ–æ—à–Ω–∏–∫–∞ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è)
        addSeoMainRow(sheet, currentRow, seoKey, seoData.data, totalData, seoData.isExcluded);
        currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ–æ—à–Ω–∏–∫–∞ (–ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ —Å–µ–æ—à–Ω–∏–∫–∞)
        const seoContentStart = currentRow;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        Object.entries(seoData.brandGeos)
          .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD)
          .forEach(([brandGeoKey, brandGeoData]) => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ë—Ä–µ–Ω–¥+–ì–µ–æ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è)
            addBrandGeoRow(sheet, currentRow, brandGeoKey, brandGeoData.data, seoData.data);
            currentRow += 3; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë—Ä–µ–Ω–¥+–ì–µ–æ (–ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ –ë—Ä–µ–Ω–¥+–ì–µ–æ)
            const brandGeoContentStart = currentRow;
            
            Object.entries(brandGeoData.streams)
              .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD)
              .forEach(([streamKey, streamData]) => {
                addStreamRow(sheet, currentRow, streamKey, streamData.data, brandGeoData.data);
                currentRow++;
                
                streamData.sites
                  .sort((a, b) => b.clicks - a.clicks)
                  .forEach(site => {
                    addSiteRow(sheet, currentRow, site, streamData.data);
                    currentRow++;
                  });
              });
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ë—Ä–µ–Ω–¥+–ì–µ–æ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
            if (brandGeoContentStart <= currentRow - 1) {
              groupBrandGeoContent(sheet, brandGeoContentStart, currentRow - 1);
            }
          });
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–æ—à–Ω–∏–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
        if (seoContentStart <= currentRow - 1) {
          groupBrandContent(sheet, seoContentStart, currentRow - 1);
        }
      });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    finalizeSummarySheet(sheet);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º:', error);
    throw error;
  }
}

// ========================================================================
// üìã –°–û–ó–î–ê–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í –ò –°–¢–†–û–ö (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
// ========================================================================

/**
 * –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function createHeaders(sheet, monthName) {
  // –°—Ç—Ä–æ–∫–∞ 1 - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
  sheet.getRange(1, 1).setValue(monthName);
  
  // –°—Ç—Ä–æ–∫–∞ 2 - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
  const headers = [
    '–û—Ñ—Ñ–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º', '–°–µ–æ—à–Ω–∏–∫', '–ö–ª–∏–∫–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
    '–†–µ–≥–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'FD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'RD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'Deps', '% –æ—Ç –æ–±—â–µ–≥–æ',
    '–†–∞—Å—Ö–æ–¥ / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–í—ã—Ä—É—á–∫–∞ / USD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
    '–ü—Ä–∏–±—ã–ª—å / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–†–∞—Å—Ö–æ–¥ / RUB', '–í—ã—Ä—É—á–∫–∞ / RUB', '–ü—Ä–∏–±—ã–ª—å / RUB'
  ];
  
  for (let i = 0; i < headers.length; i++) {
    sheet.getRange(2, i + 1).setValue(headers[i]);
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headerRange = sheet.getRange(1, 1, 2, headers.length);
  headerRange.setBackground('#4472C4')
             .setFontColor('#FFFFFF')
             .setFontWeight('bold')
             .setHorizontalAlignment('center');
}

/**
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã–º–∏ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function fillDataRow(sheet, row, data, parentData) {
  sheet.getRange(row, 2).setValue(data.sitesCount || 0); // B - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤
  sheet.getRange(row, 3).setValue(data.seoCount || 0);   // C - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤
  sheet.getRange(row, 4).setValue(data.clicks || 0);     // D - –ö–ª–∏–∫–∏
  
  // E - % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è –∫–ª–∏–∫–æ–≤
  if (parentData && parentData.clicks > 0) {
    const percentage = (data.clicks / parentData.clicks) * 100;
    sheet.getRange(row, 5).setValue(percentage / 100);
  }
  
  sheet.getRange(row, 8).setValue(data.registrations || 0); // H - –†–µ–≥–∏
  
  // I - % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è —Ä–µ–≥–∏
  if (parentData && parentData.registrations > 0) {
    const percentage = (data.registrations / parentData.registrations) * 100;
    sheet.getRange(row, 9).setValue(percentage / 100);
  }
  
  sheet.getRange(row, 12).setValue(data.fd || 0); // L - FD
  
  // M - % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è FD
  if (parentData && parentData.fd > 0) {
    const percentage = (data.fd / parentData.fd) * 100;
    sheet.getRange(row, 13).setValue(percentage / 100);
  }
  
  sheet.getRange(row, 16).setValue(data.rd || 0); // P - RD
  
  // Q - % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è RD
  if (parentData && parentData.rd > 0) {
    const percentage = (data.rd / parentData.rd) * 100;
    sheet.getRange(row, 17).setValue(percentage / 100);
  }
  
  sheet.getRange(row, 20).setValue(data.deposits || 0); // T - Deps
  
  // U - % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è Deps
  if (parentData && parentData.deposits > 0) {
    const percentage = (data.deposits / parentData.deposits) * 100;
    sheet.getRange(row, 21).setValue(percentage / 100);
  }
  
  sheet.getRange(row, 25).setValue(data.revenueUSD || 0); // Y - –í—ã—Ä—É—á–∫–∞ USD
  
  // Z - % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è –≤—ã—Ä—É—á–∫–∏
  if (parentData && parentData.revenueUSD > 0) {
    const percentage = (data.revenueUSD / parentData.revenueUSD) * 100;
    sheet.getRange(row, 26).setValue(percentage / 100);
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const numericCells = [
    sheet.getRange(row, 2),  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤
    sheet.getRange(row, 3),  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤
    sheet.getRange(row, 4),  // –ö–ª–∏–∫–∏
    sheet.getRange(row, 8),  // –†–µ–≥–∏
    sheet.getRange(row, 12), // FD
    sheet.getRange(row, 16), // RD
    sheet.getRange(row, 20), // Deps
    sheet.getRange(row, 25)  // –í—ã—Ä—É—á–∫–∞ USD
  ];
  
  numericCells.forEach(cell => {
    cell.setNumberFormat('#,##0');
  });
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
  const percentCells = [
    sheet.getRange(row, 5),  // % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è –∫–ª–∏–∫–æ–≤
    sheet.getRange(row, 9),  // % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è —Ä–µ–≥–∏
    sheet.getRange(row, 13), // % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è FD
    sheet.getRange(row, 17), // % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è RD
    sheet.getRange(row, 21), // % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è Deps
    sheet.getRange(row, 26)  // % –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è –≤—ã—Ä—É—á–∫–∏
  ];
  
  percentCells.forEach(cell => {
    cell.setNumberFormat('0.00%');
  });
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  sheet.getRange(row, 25).setNumberFormat('$#,##0.00'); // –í—ã—Ä—É—á–∫–∞ USD
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É "–í—Å–µ–≥–æ" (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê + –¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addTotalRow(sheet, row, data) {
  sheet.getRange(row, 1).setValue('–í—Å–µ–≥–æ');
  fillDataRow(sheet, row, data);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "–í—Å–µ–≥–æ" (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const totalRange = sheet.getRange(row, 1, 1, 34);
  totalRange.setBackground(–¶–í–ï–¢–ê.–í–°–ï–ì–û).setFontWeight('bold');
  
  sheet.getRange(row + 1, 1).setValue('–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ %');
  sheet.getRange(row + 2, 1).setValue('–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞
  sheet.getRange(row + 1, 1, 2, 34).setBackground('#f8f9fa').setFontStyle('italic');
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –±—Ä–µ–Ω–¥–∞ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê + –¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addBrandRow(sheet, row, brandName, data, totalData) {
  sheet.getRange(row, 1).setValue(brandName);
  fillDataRow(sheet, row, data, totalData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –±—Ä–µ–Ω–¥–∞ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const brandRange = sheet.getRange(row, 1, 1, 34);
  brandRange.setBackground(–¶–í–ï–¢–ê.–ë–†–ï–ù–î–´).setFontWeight('bold');
  
  sheet.getRange(row + 1, 1).setValue('–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ');
  sheet.getRange(row + 2, 1).setValue('–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞
  sheet.getRange(row + 1, 1, 2, 34).setBackground('#f8f9fa').setFontStyle('italic');
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –±—Ä–µ–Ω–¥+–≥–µ–æ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê + –¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addBrandGeoRow(sheet, row, brandGeoName, data, parentData) {
  sheet.getRange(row, 1).setValue(brandGeoName);
  fillDataRow(sheet, row, data, parentData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –±—Ä–µ–Ω–¥+–≥–µ–æ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const brandGeoRange = sheet.getRange(row, 1, 1, 34);
  brandGeoRange.setBackground(–¶–í–ï–¢–ê.–ë–†–ï–ù–î_–ì–ï–û).setFontWeight('bold');
  
  sheet.getRange(row + 1, 1).setValue('–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ');
  sheet.getRange(row + 2, 1).setValue('–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞
  sheet.getRange(row + 1, 1, 2, 34).setBackground('#f8f9fa').setFontStyle('italic');
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ì–ï–û (–¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addGeoRow(sheet, row, geoName, data, totalData) {
  sheet.getRange(row, 1).setValue(geoName); // –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–ª–∞–≥
  fillDataRow(sheet, row, data, totalData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ì–ï–û (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const geoRange = sheet.getRange(row, 1, 1, 34);
  geoRange.setBackground(–¶–í–ï–¢–ê.–ì–ï–û).setFontWeight('bold');
  
  sheet.getRange(row + 1, 1).setValue('–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ');
  sheet.getRange(row + 2, 1).setValue('–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞
  sheet.getRange(row + 1, 1, 2, 34).setBackground('#f8f9fa').setFontStyle('italic');
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≥–µ–æ+–±—Ä–µ–Ω–¥ (–¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addGeoBrandRow(sheet, row, geoBrandName, data, parentData) {
  sheet.getRange(row, 1).setValue(geoBrandName);
  fillDataRow(sheet, row, data, parentData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –≥–µ–æ+–±—Ä–µ–Ω–¥ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const geoBrandRange = sheet.getRange(row, 1, 1, 34);
  geoBrandRange.setBackground(–¶–í–ï–¢–ê.–ì–ï–û_–ë–†–ï–ù–î).setFontWeight('bold');
  
  sheet.getRange(row + 1, 1).setValue('–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ');
  sheet.getRange(row + 2, 1).setValue('–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞
  sheet.getRange(row + 1, 1, 2, 34).setBackground('#f8f9fa').setFontStyle('italic');
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ—Ç–æ–∫–∞ (–¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addStreamRow(sheet, row, streamName, data, parentData) {
  sheet.getRange(row, 1).setValue(streamName);
  fillDataRow(sheet, row, data, parentData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø–æ—Ç–æ–∫–∞ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const streamRange = sheet.getRange(row, 1, 1, 34);
  streamRange.setBackground(–¶–í–ï–¢–ê.–ü–û–¢–û–ö–ò);
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–µ–æ—à–Ω–∏–∫–∞ (–¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addSeoRow(sheet, row, seoName, data, parentData) {
  sheet.getRange(row, 1).setValue(seoName);
  fillDataRow(sheet, row, data, parentData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–µ–æ—à–Ω–∏–∫–∞ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const seoRange = sheet.getRange(row, 1, 1, 34);
  if (–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoName)) {
    seoRange.setBackground(–¶–í–ï–¢–ê.–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï).setFontStyle('italic');
  } else {
    seoRange.setBackground(–¶–í–ï–¢–ê.–°–ï–û–®–ù–ò–ö–ò);
  }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–µ–æ—à–Ω–∏–∫–∞ (–¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addSeoMainRow(sheet, row, seoName, data, totalData, isExcluded) {
  sheet.getRange(row, 1).setValue(seoName);
  fillDataRow(sheet, row, data, totalData);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const seoRange = sheet.getRange(row, 1, 1, 34);
  if (isExcluded) {
    seoRange.setBackground(–¶–í–ï–¢–ê.–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï).setFontStyle('italic');
  } else {
    seoRange.setBackground(–¶–í–ï–¢–ê.–°–ï–û–®–ù–ò–ö–ò).setFontWeight('bold');
  }
  
  sheet.getRange(row + 1, 1).setValue('–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ');
  sheet.getRange(row + 2, 1).setValue('–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞
  sheet.getRange(row + 1, 1, 2, 34).setBackground('#f8f9fa').setFontStyle('italic');
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–∞–π—Ç–∞ (–¶–í–ï–¢–ê –ò–ó –ö–û–ù–°–¢–ê–ù–¢)
 */
function addSiteRow(sheet, row, site, parentData) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  sheet.getRange(row, 1).setValue(site.stream);        // A - –ü–æ—Ç–æ–∫
  sheet.getRange(row, 2).setValue(site.site);          // B - –°–∞–π—Ç
  sheet.getRange(row, 3).setValue(site.seoSpecialist); // C - –°–µ–æ—à–Ω–∏–∫
  sheet.getRange(row, 4).setValue(site.clicks);        // D - –ö–ª–∏–∫–∏
  
  // –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º % –æ—Ç —Å–µ–æ—à–Ω–∏–∫–∞ –¥–ª—è –∫–ª–∏–∫–æ–≤
  if (parentData && parentData.clicks > 0) {
    const percentage = (site.clicks / parentData.clicks) * 100;
    sheet.getRange(row, 5).setValue(percentage / 100); // E - % –æ—Ç –æ–±—â–µ–≥–æ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞)
  }
  
  sheet.getRange(row, 6).setValue(site.identifier);   // F - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ)
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–∞–π—Ç–∞ (–ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´)
  const siteRange = sheet.getRange(row, 1, 1, 34);
  siteRange.setBackground(–¶–í–ï–¢–ê.–°–ê–ô–¢–´);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –∫–∞–∫ —á–∏—Å–ª–∞
  sheet.getRange(row, 4).setNumberFormat('#,##0');
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
  sheet.getRange(row, 5).setNumberFormat('0.00%');
}

// ========================================================================
// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–û–í (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê)
// ========================================================================

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (–ò–°–ö–õ–Æ–ß–ê–ï–¢ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ–æ—à–Ω–∏–∫–æ–≤)
 */
function calculateSeoTotalDataFiltered(groupedData) {
  const total = {
    clicks: 0,
    registrations: 0,
    fd: 0,
    rd: 0,
    deposits: 0,
    revenueUSD: 0,
    sitesCount: 0,
    seoCount: 0
  };
  
  const allSeoSpecialists = new Set();
  const allSites = new Set();
  
  Object.entries(groupedData).forEach(([seoName, group]) => {
    // –ò–°–ö–õ–Æ–ß–ê–ï–ú –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ–æ—à–Ω–∏–∫–æ–≤ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
    if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoName)) {
      total.clicks += group.data.clicks;
      total.registrations += group.data.registrations;
      total.fd += group.data.fd;
      total.rd += group.data.rd;
      total.deposits += group.data.deposits;
      total.revenueUSD += group.data.revenueUSD;
      
      // –ü–æ–¥—Å—á–µ—Ç —Å–∞–π—Ç–æ–≤ –∏ —Å–µ–æ—à–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
      if (group.brandGeos) {
        Object.values(group.brandGeos).forEach(brandGeo => {
          if (brandGeo.allSites) {
            brandGeo.allSites.forEach(site => allSites.add(site));
          }
        });
      }
      allSeoSpecialists.add(seoName);
    }
  });
  
  total.sitesCount = allSites.size;
  total.seoCount = allSeoSpecialists.size;
  
  return total;
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function calculateTotalData(groupedData) {
  const total = {
    clicks: 0,
    registrations: 0,
    fd: 0,
    rd: 0,
    deposits: 0,
    revenueUSD: 0,
    sitesCount: 0,
    seoCount: 0
  };
  
  const allSeoSpecialists = new Set();
  const allSites = new Set();
  
  Object.values(groupedData).forEach(group => {
    total.clicks += group.data.clicks;
    total.registrations += group.data.registrations;
    total.fd += group.data.fd;
    total.rd += group.data.rd;
    total.deposits += group.data.deposits;
    total.revenueUSD += group.data.revenueUSD;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ–æ—à–Ω–∏–∫–∏ –∏ —Å–∞–π—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ–æ—à–Ω–∏–∫–æ–≤ –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
    if (group.seoSpecialists) {
      group.seoSpecialists.forEach(seo => {
        if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seo)) {
          allSeoSpecialists.add(seo);
        }
      });
    }
    if (group.allSites) {
      group.allSites.forEach(site => allSites.add(site));
    }
  });
  
  total.seoCount = allSeoSpecialists.size;
  total.sitesCount = allSites.size;
  
  return total;
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ì–ï–û
 */
function calculateTotalGeoData(groupedData) {
  const total = {
    clicks: 0,
    registrations: 0,
    fd: 0,
    rd: 0,
    deposits: 0,
    revenueUSD: 0,
    sitesCount: 0,
    seoCount: 0
  };
  
  const allSeoSpecialists = new Set();
  const allSites = new Set();
  
  Object.values(groupedData).forEach(group => {
    total.clicks += group.data.clicks;
    total.registrations += group.data.registrations;
    total.fd += group.data.fd;
    total.rd += group.data.rd;
    total.deposits += group.data.deposits;
    total.revenueUSD += group.data.revenueUSD;
    
    if (group.seoSpecialists) {
      group.seoSpecialists.forEach(seo => {
        if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seo)) {
          allSeoSpecialists.add(seo);
        }
      });
    }
    if (group.allSites) {
      group.allSites.forEach(site => allSites.add(site));
    }
  });
  
  total.seoCount = allSeoSpecialists.size;
  total.sitesCount = allSites.size;
  
  return total;
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–æ—à–Ω–∏–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö)
 */
function calculateTotalSeoData(groupedData) {
  const total = {
    clicks: 0,
    registrations: 0,
    fd: 0,
    rd: 0,
    deposits: 0,
    revenueUSD: 0,
    sitesCount: 0,
    seoCount: 0
  };
  
  Object.values(groupedData).forEach(seoData => {
    if (!seoData.isExcluded) {
      total.clicks += seoData.data.clicks;
      total.registrations += seoData.data.registrations;
      total.fd += seoData.data.fd;
      total.rd += seoData.data.rd;
      total.deposits += seoData.data.deposits;
      total.revenueUSD += seoData.data.revenueUSD;
    }
  });
  
  return total;
}

// ========================================================================
// üìä –ì–†–£–ü–ü–ò–†–û–í–ö–ê –°–¢–†–û–ö –ò –°–¢–û–õ–ë–¶–û–í (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø + –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
// ========================================================================

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—Ä–µ–Ω–¥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
 */
function groupBrandContent(sheet, startRow, endRow) {
  try {
    if (startRow <= endRow) { // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –±—ã–ª–æ <, —Å—Ç–∞–ª–æ <=
      const range = sheet.getRange(startRow, 1, endRow - startRow + 1, 34);
      range.shiftRowGroupDepth(1);
      
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const group = sheet.getRowGroup(startRow, 1);
      if (group) {
        group.collapse();
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—Ä–µ–Ω–¥–∞:', error);
  }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—Ä–µ–Ω–¥+–≥–µ–æ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –¥–∞–∂–µ 1 —Å—Ç—Ä–æ–∫—É)
 */
function groupBrandGeoContent(sheet, startRow, endRow) {
  try {
    if (startRow <= endRow) { // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –±—ã–ª–æ <, —Å—Ç–∞–ª–æ <=
      const range = sheet.getRange(startRow, 1, endRow - startRow + 1, 34);
      range.shiftRowGroupDepth(1);
      
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const group = sheet.getRowGroup(startRow, 1);
      if (group) {
        group.collapse();
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—Ä–µ–Ω–¥+–≥–µ–æ:', error);
  }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
 */
function groupGrowthColumns(sheet) {
  try {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ –ø–∞—Ä–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const growthColumnGroups = [
      [6, 7],   // F-G (—Ä–æ—Å—Ç –∫–ª–∏–∫–æ–≤)
      [10, 11], // J-K (—Ä–æ—Å—Ç —Ä–µ–≥–æ–≤)
      [14, 15], // N-O (—Ä–æ—Å—Ç FD)
      [18, 19], // R-S (—Ä–æ—Å—Ç RD) ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
      [23, 24], // W-X (—Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤) ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
      [27, 28], // AA-AB (—Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏) ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û 
      [30, 31]  // AD-AE (—Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏) ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    ];
    
    growthColumnGroups.forEach(([start, end]) => {
      const range = sheet.getRange(1, start, sheet.getLastRow(), end - start + 1);
      range.shiftColumnGroupDepth(1);
      
      try {
        sheet.getColumnGroup(start, 1).collapse();
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ä–æ—Å—Ç–∞:', error);
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
 */
function setCompactRowSizes(sheet) {
  try {
    const lastRow = sheet.getLastRow();
    if (lastRow > 0) {
      sheet.setRowHeights(1, lastRow, 21); // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫:', error);
  }
}

/**
 * –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
 */
function formatSheet(sheet) {
  try {
    // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    sheet.setFrozenRows(2); // 2 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    sheet.setFrozenColumns(1);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    sheet.setColumnWidth(1, 250); // –ù–∞–∑–≤–∞–Ω–∏–µ - —à–∏—Ä–æ–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —à–∏—Ä–∏–Ω—ã
    for (let col = 2; col <= sheet.getLastColumn(); col++) {
      sheet.setColumnWidth(col, 80);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞:', error);
  }
}

/**
 * –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
 */
function finalizeSummarySheet(sheet) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞
  groupGrowthColumns(sheet);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫
  setCompactRowSizes(sheet);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
  formatSheet(sheet);
}

// ========================================================================
// üöÄ BATCH-–û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –£–°–ö–û–†–ï–ù–ò–Ø (–ù–û–í–û–ï)
// ========================================================================

/**
 * Batch-–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç (—É—Å–∫–æ—Ä—è–µ—Ç –≤ 10-50 —Ä–∞–∑)
 */
class BatchWriter {
  constructor(sheet) {
    this.sheet = sheet;
    this.data = []; // –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è setValues()
    this.formats = []; // –ú–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    this.startRow = 1;
    this.startCol = 1;
    this.maxRow = 0;
    this.maxCol = 0;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ batch
   */
  setValue(row, col, value) {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∞—Å—Å–∏–≤ data –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
    while (this.data.length < row) {
      this.data.push([]);
    }
    while (this.data[row - 1].length < col) {
      this.data[row - 1].push('');
    }
    
    this.data[row - 1][col - 1] = value;
    this.maxRow = Math.max(this.maxRow, row);
    this.maxCol = Math.max(this.maxCol, col);
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  setRowValues(row, values) {
    for (let i = 0; i < values.length; i++) {
      this.setValue(row, i + 1, values[i]);
    }
  }
  
  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
   */
  flush() {
    if (this.maxRow > 0 && this.maxCol > 0) {
      console.log(`üìù Batch-–∑–∞–ø–∏—Å—å: ${this.maxRow} —Å—Ç—Ä–æ–∫ x ${this.maxCol} —Å—Ç–æ–ª–±—Ü–æ–≤`);
      
      // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
      for (let i = 0; i < this.data.length; i++) {
        while (this.data[i].length < this.maxCol) {
          this.data[i].push('');
        }
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
      const range = this.sheet.getRange(1, 1, this.maxRow, this.maxCol);
      range.setValues(this.data);
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  clear() {
    this.data = [];
    this.formats = [];
    this.maxRow = 0;
    this.maxCol = 0;
  }
}

/**
 * Batch-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—É—Å–∫–æ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—ã)
 */
class BatchFormatter {
  constructor(sheet) {
    this.sheet = sheet;
    this.operations = []; // –ú–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  }
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
   */
  formatRow(row, backgroundColor, fontColor = '#000000', fontWeight = 'normal') {
    this.operations.push({
      type: 'row',
      row: row,
      backgroundColor: backgroundColor,
      fontColor: fontColor,
      fontWeight: fontWeight
    });
  }
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   */
  formatRange(startRow, startCol, numRows, numCols, backgroundColor, fontColor = '#000000') {
    this.operations.push({
      type: 'range',
      startRow: startRow,
      startCol: startCol,
      numRows: numRows,
      numCols: numCols,
      backgroundColor: backgroundColor,
      fontColor: fontColor
    });
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  flush() {
    console.log(`üé® Batch-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${this.operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const rowOps = this.operations.filter(op => op.type === 'row');
    const rangeOps = this.operations.filter(op => op.type === 'range');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
    rowOps.forEach(op => {
      const range = this.sheet.getRange(op.row, 1, 1, this.sheet.getLastColumn());
      range.setBackground(op.backgroundColor);
      if (op.fontColor !== '#000000') range.setFontColor(op.fontColor);
      if (op.fontWeight !== 'normal') range.setFontWeight(op.fontWeight);
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    rangeOps.forEach(op => {
      const range = this.sheet.getRange(op.startRow, op.startCol, op.numRows, op.numCols);
      range.setBackground(op.backgroundColor);
      if (op.fontColor !== '#000000') range.setFontColor(op.fontColor);
    });
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  clear() {
    this.operations = [];
  }
}

/**
 * –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –û–î–ò–ù –í–´–ó–û–í setValues() –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø)
 */
function createSummarySheetFast(tableId, groupedData, monthName) {
  console.log('üìä –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô: –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø + –û–î–ò–ù –í–´–ó–û–í setValues()');
  
  return executeWithRetry(() => {
    const startTime = new Date();
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –°–û–ë–ò–†–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –í –û–î–ò–ù –ú–ê–°–°–ò–í –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    const allData = [];
    
    // 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏
    allData.push([monthName, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    allData.push(['–û—Ñ—Ñ–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º', '–°–µ–æ—à–Ω–∏–∫', '–ö–ª–∏–∫–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–†–µ–≥–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'FD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'RD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'Deps', '% –æ—Ç –æ–±—â–µ–≥–æ',
      '–†–∞—Å—Ö–æ–¥ / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–í—ã—Ä—É—á–∫–∞ / USD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–ü—Ä–∏–±—ã–ª—å / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–†–∞—Å—Ö–æ–¥ / RUB', '–í—ã—Ä—É—á–∫–∞ / RUB', '–ü—Ä–∏–±—ã–ª—å / RUB']);
    
    // 2. –°—Ç—Ä–æ–∫–∞ "–í—Å–µ–≥–æ" (–í–ö–õ–Æ–ß–ê–ï–¢ –í–°–ï–• —Å–µ–æ—à–Ω–∏–∫–æ–≤ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–≤–æ–¥–Ω—ã–º–∏)
    const totalData = calculateTotalData(groupedData);
    allData.push(['–í—Å–µ–≥–æ', totalData.sitesCount || 0, totalData.seoCount || 0, totalData.clicks || 0, 0, 0, 0,
      totalData.registrations || 0, 0, 0, 0, totalData.fd || 0, 0, 0, 0, totalData.rd || 0, 0, 0, 0, totalData.deposits || 0, 0,
      0, 0, 0, totalData.revenueUSD || 0, 0, 0, 0, (totalData.revenueUSD || 0) - (totalData.expenseUSD || 0), 0, 0,
      (totalData.expenseUSD || 0) * 95, (totalData.revenueUSD || 0) * 95, ((totalData.revenueUSD || 0) - (totalData.expenseUSD || 0)) * 95]);
    allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ %', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    
    // 3. –í–°–ï –î–ê–ù–ù–´–ï –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –ü–û–õ–ù–ê–Ø –ö–ê–†–¢–ò–ù–ê
    const sortedBrands = Object.entries(groupedData)
      .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
      // –£–ë–†–ê–õ –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–• –±—Ä–µ–Ω–¥–æ–≤
    
    sortedBrands.forEach(([brandName, brandData]) => {
      // –°—Ç—Ä–æ–∫–∞ –±—Ä–µ–Ω–¥–∞
      allData.push([brandName, brandData.data.sitesCount || 0, brandData.data.seoCount || 0, brandData.data.clicks || 0,
        0, 0, 0, brandData.data.registrations || 0, 0, 0, 0, brandData.data.fd || 0, 0, 0, 0, brandData.data.rd || 0, 0, 0, 0,
        brandData.data.deposits || 0, 0, brandData.data.expenseUSD || 0, 0, 0, brandData.data.revenueUSD || 0, 0, 0, 0,
        (brandData.data.revenueUSD || 0) - (brandData.data.expenseUSD || 0), 0, 0,
        (brandData.data.expenseUSD || 0) * 95, (brandData.data.revenueUSD || 0) * 95, ((brandData.data.revenueUSD || 0) - (brandData.data.expenseUSD || 0)) * 95]);
      allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
      allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
      
      // –í–°–ï –ë—Ä–µ–Ω–¥+–ì–µ–æ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
      const sortedBrandGeos = Object.entries(brandData.brandGeos)
        .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
        // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –≥–µ–æ
      
      sortedBrandGeos.forEach(([brandGeoName, brandGeoData]) => {
        // –°—Ç—Ä–æ–∫–∞ –ë—Ä–µ–Ω–¥+–ì–µ–æ
        allData.push([brandGeoName, brandGeoData.data.sitesCount || 0, brandGeoData.data.seoCount || 0, brandGeoData.data.clicks || 0,
          0, 0, 0, brandGeoData.data.registrations || 0, 0, 0, 0, brandGeoData.data.fd || 0, 0, 0, 0, brandGeoData.data.rd || 0, 0, 0, 0,
          brandGeoData.data.deposits || 0, 0, brandGeoData.data.expenseUSD || 0, 0, 0, brandGeoData.data.revenueUSD || 0, 0, 0, 0,
          (brandGeoData.data.revenueUSD || 0) - (brandGeoData.data.expenseUSD || 0), 0, 0,
          (brandGeoData.data.expenseUSD || 0) * 95, (brandGeoData.data.revenueUSD || 0) * 95, ((brandGeoData.data.revenueUSD || 0) - (brandGeoData.data.expenseUSD || 0)) * 95]);
        allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
        allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
        
        // –í–°–ï –ü–û–¢–û–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
        const sortedStreams = Object.entries(brandGeoData.streams || {})
          .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
          // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ø–æ—Ç–æ–∫–∏
          
        sortedStreams.forEach(([streamName, streamData]) => {
          allData.push([`  üî∏ ${streamName}`, streamData.data.sitesCount || 0, streamData.data.seoCount || 0, streamData.data.clicks || 0,
            0, 0, 0, streamData.data.registrations || 0, 0, 0, 0, streamData.data.fd || 0, 0, 0, 0, streamData.data.rd || 0, 0, 0, 0,
            streamData.data.deposits || 0, 0, streamData.data.expenseUSD || 0, 0, 0, streamData.data.revenueUSD || 0, 0, 0, 0,
            (streamData.data.revenueUSD || 0) - (streamData.data.expenseUSD || 0), 0, 0,
            (streamData.data.expenseUSD || 0) * 95, (streamData.data.revenueUSD || 0) * 95, ((streamData.data.revenueUSD || 0) - (streamData.data.expenseUSD || 0)) * 95]);
          
          // –í–°–ï –°–ï–û–®–ù–ò–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
          const sortedSeos = Object.entries(streamData.seos || {})
            .sort(([,a], [,b]) => b.revenueUSD - a.revenueUSD);
            // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–• —Å–µ–æ—à–Ω–∏–∫–æ–≤
            
          sortedSeos.forEach(([seoName, seoData]) => {
            if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoName)) {
              allData.push([`    üë§ ${seoName}`, 1, 1, seoData.clicks || 0,
                0, 0, 0, seoData.registrations || 0, 0, 0, 0, seoData.fd || 0, 0, 0, 0, seoData.rd || 0, 0, 0, 0,
                seoData.deposits || 0, 0, seoData.expenseUSD || 0, 0, 0, seoData.revenueUSD || 0, 0, 0, 0,
                (seoData.revenueUSD || 0) - (seoData.expenseUSD || 0), 0, 0,
                (seoData.expenseUSD || 0) * 95, (seoData.revenueUSD || 0) * 95, ((seoData.revenueUSD || 0) - (seoData.expenseUSD || 0)) * 95]);
            }
          });
          
          // –í–°–ï –°–ê–ô–¢–´ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
          if (streamData.sites && streamData.sites.length > 0) {
            const topSites = streamData.sites
              .sort((a, b) => (b.clicks || 0) - (a.clicks || 0));
              // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–∞–π—Ç—ã
              
            topSites.forEach(site => {
              allData.push([`      üåê ${site.domain}`, 1, 1, site.clicks || 0,
                0, 0, 0, site.registrations || 0, 0, 0, 0, site.fd || 0, 0, 0, 0, site.rd || 0, 0, 0, 0,
                site.deposits || 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            });
          }
        });
      });
    });
    
    // –ó–ê–ü–ò–°–´–í–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –û–î–ù–ò–ú –í–´–ó–û–í–û–ú (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
    if (allData.length > 0) {
      sheet.getRange(1, 1, allData.length, 34).setValues(allData);
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.setFrozenRows(2);
    sheet.setColumnWidth(1, 200);
    
    const endTime = new Date();
    const executionTime = (endTime - startTime) / 1000;
    console.log(`‚úÖ –ü–û–õ–ù–ê–Ø –ë—Ä–µ–Ω–¥+–ì–µ–æ —Å–≤–æ–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ ${executionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥ (${allData.length} —Å—Ç—Ä–æ–∫)`);
    console.log('‚ö° –û–î–ò–ù –í–´–ó–û–í setValues(): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å + –º–∏–Ω–∏–º—É–º API calls');
    console.log('üìä –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô: –í–°–ï –±—Ä–µ–Ω–¥—ã √ó –í–°–ï –≥–µ–æ √ó –í–°–ï –ø–æ—Ç–æ–∫–∏ √ó –í–°–ï —Å–µ–æ—à–Ω–∏–∫–∏ √ó –í–°–ï —Å–∞–π—Ç—ã');
  });
}

/**
 * –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å batch-–∑–∞–ø–∏—Å—å—é
 */
function addTotalRowFast(writer, formatter, row, data) {
  const values = ['–í—Å–µ–≥–æ', data.sitesCount || 0, data.seoCount || 0, data.clicks || 0];
  writer.setRowValues(row, values);
  formatter.formatRow(row, '#d9e1f2', '#000000', 'bold');
}

function addBrandRowFast(writer, formatter, row, brandName, data, totalData) {
  const values = [brandName, data.sitesCount || 0, data.seoCount || 0, data.clicks || 0];
  writer.setRowValues(row, values);
  formatter.formatRow(row, '#d9d2e9', '#000000', 'bold');
}

function addBrandGeoRowFast(writer, formatter, row, brandGeoName, data, parentData) {
  const values = [brandGeoName, data.sitesCount || 0, data.seoCount || 0, data.clicks || 0];
  writer.setRowValues(row, values);
  formatter.formatRow(row, '#f0ecf5', '#000000', 'bold');
}

function addStreamRowFast(writer, formatter, row, streamName, data, parentData) {
  const values = [`–°–≤–æ–¥–Ω–∞—è / ${streamName}`, data.sitesCount || 0, data.seoCount || 0, data.clicks || 0];
  writer.setRowValues(row, values);
  formatter.formatRow(row, '#f4e6ed');
}

function addSeoRowFast(writer, formatter, row, seoName, data, parentData) {
  const values = [seoName, data.sitesCount || 0, 1, data.clicks || 0];
  writer.setRowValues(row, values);
  
  const bgColor = –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoName) ? '#E8E8E8' : '#D9DAD6';
  formatter.formatRow(row, bgColor);
}

function addSiteRowFast(writer, formatter, row, site, parentData) {
  const values = [site.stream, site.site, site.seoSpecialist, site.clicks];
  writer.setRowValues(row, values);
  formatter.formatRow(row, '#F3E3EB');
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ì–ï–û (–ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø)
 */
function createGeoSummaryReportFast(monthName, groupedGeoData) {
  console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ì–ï–û (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)...');
  const startTime = new Date();
  
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch-writer —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const writer = new BatchWriter(sheet);
    
    let currentRow = 1;
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = [
      '–ì–ï–û', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º', '–°–µ–æ—à–Ω–∏–∫', '–ö–ª–∏–∫–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–†–µ–≥–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'FD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'RD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'Deps', '% –æ—Ç –æ–±—â–µ–≥–æ',
      '–†–∞—Å—Ö–æ–¥ / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–í—ã—Ä—É—á–∫–∞ / USD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–ü—Ä–∏–±—ã–ª—å / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–†–∞—Å—Ö–æ–¥ / RUB', '–í—ã—Ä—É—á–∫–∞ / RUB', '–ü—Ä–∏–±—ã–ª—å / RUB'
    ];
    
    writer.setValue(1, 1, monthName);
    writer.setRowValues(2, headers);
    currentRow = 3;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const sortedGeos = Object.entries(groupedGeoData || {})
      .sort(([,a], [,b]) => (b.data?.revenueUSD || 0) - (a.data?.revenueUSD || 0));
    
    sortedGeos.forEach(([geoKey, geoData]) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const geoName = –ø–æ–ª—É—á–∏—Ç—å–°—Ç—Ä–∞–Ω—É(geoKey);
      const values = [
        geoName,
        geoData.data?.sitesCount || 0,
        geoData.data?.seoCount || 0,
        geoData.data?.clicks || 0,
        0, // % –æ—Ç –æ–±—â–µ–≥–æ - –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        0, // –†–æ—Å—Ç
        0, // –†–æ—Å—Ç %
        geoData.data?.registrations || 0
        // ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–µ–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      ];
      writer.setRowValues(currentRow, values);
      currentRow++;
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º batch
    writer.flush();
    
    // –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    finalizeSummarySheetStructureOnly(sheet);
    
    const endTime = new Date();
    console.log(`‚úÖ –ì–ï–û —Å–≤–æ–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ ${(endTime - startTime) / 1000} —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ì–ï–û —Å–≤–æ–¥–Ω–æ–π:', error);
    throw error;
  }
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –°–µ–æ—à–Ω–∏–∫–∏ (–ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø)
 */
function createSeoSummaryReportFast(monthName, groupedSeoData) {
  console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –°–µ–æ—à–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)...');
  const startTime = new Date();
  
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch-writer —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const writer = new BatchWriter(sheet);
    
    let currentRow = 1;
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = [
      '–°–µ–æ—à–Ω–∏–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º', '–°–µ–æ—à–Ω–∏–∫', '–ö–ª–∏–∫–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–†–µ–≥–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'FD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'RD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'Deps', '% –æ—Ç –æ–±—â–µ–≥–æ',
      '–†–∞—Å—Ö–æ–¥ / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–í—ã—Ä—É—á–∫–∞ / USD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–ü—Ä–∏–±—ã–ª—å / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–†–∞—Å—Ö–æ–¥ / RUB', '–í—ã—Ä—É—á–∫–∞ / RUB', '–ü—Ä–∏–±—ã–ª—å / RUB'
    ];
    
    writer.setValue(1, 1, monthName);
    writer.setRowValues(2, headers);
    currentRow = 3;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ SEO (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const sortedSeos = Object.entries(groupedSeoData || {})
      .sort(([,a], [,b]) => (b.revenueUSD || 0) - (a.revenueUSD || 0));
    
    sortedSeos.forEach(([seoKey, seoData]) => {
      const seoIcon = –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoKey) ? '‚ö†Ô∏è' : 'üë§';
      const values = [
        `${seoIcon} ${seoKey}`,
        seoData.sitesCount || 0,
        1, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤ = 1
        seoData.clicks || 0,
        0, // % –æ—Ç –æ–±—â–µ–≥–æ
        0, // –†–æ—Å—Ç
        0, // –†–æ—Å—Ç %
        seoData.registrations || 0
        // ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–µ–π
      ];
      writer.setRowValues(currentRow, values);
      currentRow++;
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º batch
    writer.flush();
    
    // –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    finalizeSummarySheetStructureOnly(sheet);
    
    const endTime = new Date();
    console.log(`‚úÖ –°–µ–æ—à–Ω–∏–∫–∏ —Å–≤–æ–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ ${(endTime - startTime) / 1000} —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π –°–µ–æ—à–Ω–∏–∫–∏:', error);
    throw error;
  }
}

/**
 * Retry-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç timeout
 */
function executeWithRetry(func, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`‚ö° –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}...`);
      return func();
    } catch (error) {
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.toString());
      
      if (attempt === maxRetries) {
        throw error;
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      console.log('‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...');
      Utilities.sleep(2000);
    }
  }
}

/**
 * –ü–û–õ–ù–ê–Ø –ì–ï–û –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –û–î–ò–ù –í–´–ó–û–í setValues() (–í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø)
 */
function createGeoSummarySimple(monthName, groupedGeoData) {
  console.log('üìä –ü–û–õ–ù–ê–Ø –ì–ï–û –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô: –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø + –û–î–ò–ù –í–´–ó–û–í setValues()');
  
  return executeWithRetry(() => {
    const startTime = new Date();
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–∏—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –°–û–ë–ò–†–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –í –û–î–ò–ù –ú–ê–°–°–ò–í –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    const allData = [];
    
    // 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏
    allData.push([monthName, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    allData.push(['–ì–ï–û', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º', '–°–µ–æ—à–Ω–∏–∫', '–ö–ª–∏–∫–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–†–µ–≥–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'FD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'RD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'Deps', '% –æ—Ç –æ–±—â–µ–≥–æ',
      '–†–∞—Å—Ö–æ–¥ / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–í—ã—Ä—É—á–∫–∞ / USD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–ü—Ä–∏–±—ã–ª—å / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–†–∞—Å—Ö–æ–¥ / RUB', '–í—ã—Ä—É—á–∫–∞ / RUB', '–ü—Ä–∏–±—ã–ª—å / RUB']);
    
    // 2. –°—Ç—Ä–æ–∫–∞ "–í—Å–µ–≥–æ"
    const totalData = calculateTotalGeoData(groupedGeoData);
    allData.push(['–í—Å–µ–≥–æ', totalData.sitesCount || 0, totalData.seoCount || 0, totalData.clicks || 0, 0, 0, 0,
      totalData.registrations || 0, 0, 0, 0, totalData.fd || 0, 0, 0, 0, totalData.rd || 0, 0, 0, 0, totalData.deposits || 0, 0,
      0, 0, 0, totalData.revenueUSD || 0, 0, 0, 0, (totalData.revenueUSD || 0) - (totalData.expenseUSD || 0), 0, 0,
      (totalData.expenseUSD || 0) * 95, (totalData.revenueUSD || 0) * 95, ((totalData.revenueUSD || 0) - (totalData.expenseUSD || 0)) * 95]);
    allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ %', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    
    // 3. –í–°–ï –ì–ï–û –î–ê–ù–ù–´–ï –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –ü–û–õ–ù–ê–Ø –ö–ê–†–¢–ò–ù–ê
    const sortedGeos = Object.entries(groupedGeoData)
      .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
      // –£–ë–†–ê–õ –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ì–ï–û
    
    sortedGeos.forEach(([geoKey, geoData]) => {
      const geoDisplayName = –ø–æ–ª—É—á–∏—Ç—å–°—Ç—Ä–∞–Ω—É(geoKey);
      
      // –°—Ç—Ä–æ–∫–∞ –ì–ï–û
      allData.push([geoDisplayName, geoData.data.sitesCount || 0, geoData.data.seoCount || 0, geoData.data.clicks || 0,
        0, 0, 0, geoData.data.registrations || 0, 0, 0, 0, geoData.data.fd || 0, 0, 0, 0, geoData.data.rd || 0, 0, 0, 0,
        geoData.data.deposits || 0, 0, geoData.data.expenseUSD || 0, 0, 0, geoData.data.revenueUSD || 0, 0, 0, 0,
        (geoData.data.revenueUSD || 0) - (geoData.data.expenseUSD || 0), 0, 0,
        (geoData.data.expenseUSD || 0) * 95, (geoData.data.revenueUSD || 0) * 95, ((geoData.data.revenueUSD || 0) - (geoData.data.expenseUSD || 0)) * 95]);
      allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
      allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
      
      // –í–°–ï –ì–ï–û+–ë–†–ï–ù–î–´ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
      const sortedGeoBrands = Object.entries(geoData.geoBrands || {})
        .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
        // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–• –±—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –ì–ï–û
        
      sortedGeoBrands.forEach(([geoBrandKey, geoBrandData]) => {
        const brandName = geoBrandKey.split('_')[1] || '';
        const geoBrandDisplayName = `  üî∏ ${geoDisplayName} ${brandName}`;
        
        allData.push([geoBrandDisplayName, geoBrandData.data.sitesCount || 0, geoBrandData.data.seoCount || 0, geoBrandData.data.clicks || 0,
          0, 0, 0, geoBrandData.data.registrations || 0, 0, 0, 0, geoBrandData.data.fd || 0, 0, 0, 0, geoBrandData.data.rd || 0, 0, 0, 0,
          geoBrandData.data.deposits || 0, 0, geoBrandData.data.expenseUSD || 0, 0, 0, geoBrandData.data.revenueUSD || 0, 0, 0, 0,
          (geoBrandData.data.revenueUSD || 0) - (geoBrandData.data.expenseUSD || 0), 0, 0,
          (geoBrandData.data.expenseUSD || 0) * 95, (geoBrandData.data.revenueUSD || 0) * 95, ((geoBrandData.data.revenueUSD || 0) - (geoBrandData.data.expenseUSD || 0)) * 95]);
        allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
        allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
        
        // –í–°–ï –ü–û–¢–û–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
        const sortedStreams = Object.entries(geoBrandData.streams || {})
          .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
          // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ø–æ—Ç–æ–∫–∏
          
        sortedStreams.forEach(([streamName, streamData]) => {
          allData.push([`    üî∏ ${streamName}`, streamData.data.sitesCount || 0, streamData.data.seoCount || 0, streamData.data.clicks || 0,
            0, 0, 0, streamData.data.registrations || 0, 0, 0, 0, streamData.data.fd || 0, 0, 0, 0, streamData.data.rd || 0, 0, 0, 0,
            streamData.data.deposits || 0, 0, streamData.data.expenseUSD || 0, 0, 0, streamData.data.revenueUSD || 0, 0, 0, 0,
            (streamData.data.revenueUSD || 0) - (streamData.data.expenseUSD || 0), 0, 0,
            (streamData.data.expenseUSD || 0) * 95, (streamData.data.revenueUSD || 0) * 95, ((streamData.data.revenueUSD || 0) - (streamData.data.expenseUSD || 0)) * 95]);
          
          // –í–°–ï –°–ï–û–®–ù–ò–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
          const sortedSeos = Object.entries(streamData.seos || {})
            .sort(([,a], [,b]) => b.revenueUSD - a.revenueUSD);
            // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–• —Å–µ–æ—à–Ω–∏–∫–æ–≤
            
          sortedSeos.forEach(([seoName, seoData]) => {
            if (!–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoName)) {
              allData.push([`      üë§ ${seoName}`, 1, 1, seoData.clicks || 0,
                0, 0, 0, seoData.registrations || 0, 0, 0, 0, seoData.fd || 0, 0, 0, 0, seoData.rd || 0, 0, 0, 0,
                seoData.deposits || 0, 0, seoData.expenseUSD || 0, 0, 0, seoData.revenueUSD || 0, 0, 0, 0,
                (seoData.revenueUSD || 0) - (seoData.expenseUSD || 0), 0, 0,
                (seoData.expenseUSD || 0) * 95, (seoData.revenueUSD || 0) * 95, ((seoData.revenueUSD || 0) - (seoData.expenseUSD || 0)) * 95]);
            }
          });
          
          // –í–°–ï –°–ê–ô–¢–´ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
          if (streamData.sites && streamData.sites.length > 0) {
            const topSites = streamData.sites
              .sort((a, b) => (b.clicks || 0) - (a.clicks || 0));
              // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–∞–π—Ç—ã
              
            topSites.forEach(site => {
              allData.push([`        üåê ${site.domain}`, 1, 1, site.clicks || 0,
                0, 0, 0, site.registrations || 0, 0, 0, 0, site.fd || 0, 0, 0, 0, site.rd || 0, 0, 0, 0,
                site.deposits || 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            });
          }
        });
      });
    });
    
    // –ó–ê–ü–ò–°–´–í–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –û–î–ù–ò–ú –í–´–ó–û–í–û–ú (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
    if (allData.length > 0) {
      sheet.getRange(1, 1, allData.length, 34).setValues(allData);
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.setFrozenRows(2);
    sheet.setColumnWidth(1, 150);
    
    const endTime = new Date();
    const executionTime = (endTime - startTime) / 1000;
    console.log(`‚úÖ –ü–û–õ–ù–ê–Ø –ì–ï–û —Å–≤–æ–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ ${executionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥ (${allData.length} —Å—Ç—Ä–æ–∫)`);
    console.log('‚ö° –û–î–ò–ù –í–´–ó–û–í setValues(): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å + –º–∏–Ω–∏–º—É–º API calls');
    console.log('üìä –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô: –í–°–ï –ì–ï–û √ó –í–°–ï –±—Ä–µ–Ω–¥—ã √ó –í–°–ï –ø–æ—Ç–æ–∫–∏ √ó –í–°–ï —Å–µ–æ—à–Ω–∏–∫–∏ √ó –í–°–ï —Å–∞–π—Ç—ã');
  });
}

/**
 * –ü–û–õ–ù–´–ï –°–ï–û–®–ù–ò–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –û–î–ò–ù –í–´–ó–û–í setValues() (–í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø)
 */
function createSeoSummarySimple(monthName, groupedSeoData) {
  console.log('üìä –ü–û–õ–ù–´–ï –°–ï–û–®–ù–ò–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô: –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø + –û–î–ò–ù –í–´–ó–û–í setValues()');
  
  return executeWithRetry(() => {
    const startTime = new Date();
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    const sheetName = `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${monthName}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–∏—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingSheet = spreadsheet.getSheetByName(sheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.insertSheet(sheetName);
    
    // –°–û–ë–ò–†–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –í –û–î–ò–ù –ú–ê–°–°–ò–í –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    const allData = [];
    
    // 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏
    allData.push([monthName, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    allData.push(['–°–µ–æ—à–Ω–∏–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º', '–°–µ–æ—à–Ω–∏–∫', '–ö–ª–∏–∫–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–†–µ–≥–∏', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'FD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'RD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', 'Deps', '% –æ—Ç –æ–±—â–µ–≥–æ',
      '–†–∞—Å—Ö–æ–¥ / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–í—ã—Ä—É—á–∫–∞ / USD', '% –æ—Ç –æ–±—â–µ–≥–æ', '–†–æ—Å—Ç', '–†–æ—Å—Ç %',
      '–ü—Ä–∏–±—ã–ª—å / USD', '–†–æ—Å—Ç', '–†–æ—Å—Ç %', '–†–∞—Å—Ö–æ–¥ / RUB', '–í—ã—Ä—É—á–∫–∞ / RUB', '–ü—Ä–∏–±—ã–ª—å / RUB']);
    
    // 2. –°—Ç—Ä–æ–∫–∞ "–í—Å–µ–≥–æ" (–í–ö–õ–Æ–ß–ê–Ø –í–°–ï–• —Å–µ–æ—à–Ω–∏–∫–æ–≤ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–≤–æ–¥–Ω—ã–º–∏)
    const totalData = calculateTotalData(groupedSeoData);
    allData.push(['–í—Å–µ–≥–æ', totalData.sitesCount || 0, totalData.seoCount || 0, totalData.clicks || 0, 0, 0, 0,
      totalData.registrations || 0, 0, 0, 0, totalData.fd || 0, 0, 0, 0, totalData.rd || 0, 0, 0, 0, totalData.deposits || 0, 0,
      0, 0, 0, totalData.revenueUSD || 0, 0, 0, 0, (totalData.revenueUSD || 0) - (totalData.expenseUSD || 0), 0, 0,
      (totalData.expenseUSD || 0) * 95, (totalData.revenueUSD || 0) * 95, ((totalData.revenueUSD || 0) - (totalData.expenseUSD || 0)) * 95]);
    allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ %', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
    
    // 3. –í–°–ï –°–ï–û–®–ù–ò–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –ü–û–õ–ù–ê–Ø –ö–ê–†–¢–ò–ù–ê
    const sortedSeos = Object.entries(groupedSeoData)
      .sort(([,a], [,b]) => {
        // –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ–æ—à–Ω–∏–∫–∏ –≤ –∫–æ–Ω–µ—Ü
        if (a.isExcluded && !b.isExcluded) return 1;
        if (!a.isExcluded && b.isExcluded) return -1;
        return b.data.revenueUSD - a.data.revenueUSD;
      });
      // –£–ë–†–ê–õ –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–• —Å–µ–æ—à–Ω–∏–∫–æ–≤
    
    sortedSeos.forEach(([seoKey, seoData]) => {
      const seoIcon = –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoKey) ? '‚ö†Ô∏è' : 'üë§';
      const seoDisplayName = `${seoIcon} ${seoKey}`;
      
      // –°—Ç—Ä–æ–∫–∞ —Å–µ–æ—à–Ω–∏–∫–∞
      allData.push([seoDisplayName, seoData.data.sitesCount || 0, 1, seoData.data.clicks || 0,
        0, 0, 0, seoData.data.registrations || 0, 0, 0, 0, seoData.data.fd || 0, 0, 0, 0, seoData.data.rd || 0, 0, 0, 0,
        seoData.data.deposits || 0, 0, seoData.data.expenseUSD || 0, 0, 0, seoData.data.revenueUSD || 0, 0, 0, 0,
        (seoData.data.revenueUSD || 0) - (seoData.data.expenseUSD || 0), 0, 0,
        (seoData.data.expenseUSD || 0) * 95, (seoData.data.revenueUSD || 0) * 95, ((seoData.data.revenueUSD || 0) - (seoData.data.expenseUSD || 0)) * 95]);
      allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
      allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
      
      // –í–°–ï –ë–†–ï–ù–î+–ì–ï–û –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
      const sortedBrandGeos = Object.entries(seoData.brandGeos || {})
        .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
        // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ë—Ä–µ–Ω–¥+–ì–µ–æ
        
      sortedBrandGeos.forEach(([brandGeoKey, brandGeoData]) => {
        allData.push([`  üî∏ ${brandGeoKey}`, brandGeoData.data.sitesCount || 0, brandGeoData.data.seoCount || 0, brandGeoData.data.clicks || 0,
          0, 0, 0, brandGeoData.data.registrations || 0, 0, 0, 0, brandGeoData.data.fd || 0, 0, 0, 0, brandGeoData.data.rd || 0, 0, 0, 0,
          brandGeoData.data.deposits || 0, 0, brandGeoData.data.expenseUSD || 0, 0, 0, brandGeoData.data.revenueUSD || 0, 0, 0, 0,
          (brandGeoData.data.revenueUSD || 0) - (brandGeoData.data.expenseUSD || 0), 0, 0,
          (brandGeoData.data.expenseUSD || 0) * 95, (brandGeoData.data.revenueUSD || 0) * 95, ((brandGeoData.data.revenueUSD || 0) - (brandGeoData.data.expenseUSD || 0)) * 95]);
        allData.push(['–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
        allData.push(['–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']);
        
        // –í–°–ï –ü–û–¢–û–ö–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
        const sortedStreams = Object.entries(brandGeoData.streams || {})
          .sort(([,a], [,b]) => b.data.revenueUSD - a.data.revenueUSD);
          // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ø–æ—Ç–æ–∫–∏
          
        sortedStreams.forEach(([streamName, streamData]) => {
          allData.push([`    üî∏ ${streamName}`, streamData.data.sitesCount || 0, streamData.data.seoCount || 0, streamData.data.clicks || 0,
            0, 0, 0, streamData.data.registrations || 0, 0, 0, 0, streamData.data.fd || 0, 0, 0, 0, streamData.data.rd || 0, 0, 0, 0,
            streamData.data.deposits || 0, 0, streamData.data.expenseUSD || 0, 0, 0, streamData.data.revenueUSD || 0, 0, 0, 0,
            (streamData.data.revenueUSD || 0) - (streamData.data.expenseUSD || 0), 0, 0,
            (streamData.data.expenseUSD || 0) * 95, (streamData.data.revenueUSD || 0) * 95, ((streamData.data.revenueUSD || 0) - (streamData.data.expenseUSD || 0)) * 95]);
          
          // –í–°–ï –°–ê–ô–¢–´ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
          if (streamData.sites && streamData.sites.length > 0) {
            const topSites = streamData.sites
              .sort((a, b) => (b.clicks || 0) - (a.clicks || 0));
              // –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–∞–π—Ç—ã
              
            topSites.forEach(site => {
              allData.push([`      üåê ${site.domain}`, 1, 1, site.clicks || 0,
                0, 0, 0, site.registrations || 0, 0, 0, 0, site.fd || 0, 0, 0, 0, site.rd || 0, 0, 0, 0,
                site.deposits || 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            });
          }
        });
      });
    });
    
    // –ó–ê–ü–ò–°–´–í–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –û–î–ù–ò–ú –í–´–ó–û–í–û–ú (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
    if (allData.length > 0) {
      sheet.getRange(1, 1, allData.length, 34).setValues(allData);
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.setFrozenRows(2);
    sheet.setColumnWidth(1, 150);
    
    const endTime = new Date();
    const executionTime = (endTime - startTime) / 1000;
    console.log(`‚úÖ –ü–û–õ–ù–ê–Ø –°–µ–æ—à–Ω–∏–∫–∏ —Å–≤–æ–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ ${executionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥ (${allData.length} —Å—Ç—Ä–æ–∫)`);
    console.log('‚ö° –û–î–ò–ù –í–´–ó–û–í setValues(): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å + –º–∏–Ω–∏–º—É–º API calls');
    console.log('üìä –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô: –í–°–ï —Å–µ–æ—à–Ω–∏–∫–∏ √ó –í–°–ï –ë—Ä–µ–Ω–¥+–ì–µ–æ √ó –í–°–ï –ø–æ—Ç–æ–∫–∏ √ó –í–°–ï —Å–∞–π—Ç—ã');
  });
}

/**
 * –ë–∞–∑–æ–≤–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ï–ó –¶–í–ï–¢–û–í (–¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)
 */
function finalizeSummarySheetStructureOnly(sheet) {
  console.log('‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  
  try {
    // –¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    
    // 1. –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–∞–Ω–µ–ª–∏ (—Å—Ç—Ä–æ–∫–∞ 2)
    sheet.setFrozenRows(2);
    
    // 2. –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    sheet.setColumnWidth(1, 200); // –û—Ñ—Ñ–µ—Ä
    sheet.setColumnWidth(2, 80);  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤
    sheet.setColumnWidth(3, 80);  // –°–µ–æ—à–Ω–∏–∫
    
    // 3. –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    sheet.setRowHeight(1, 25);
    sheet.setRowHeight(2, 25);
    
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –±—ã—Å—Ç—Ä–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

console.log('üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ì–û–¢–û–í–´ - –¢–û–ß–ù–´–ï –ö–û–ü–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê!');
console.log('üöÄ + BATCH-–û–ë–†–ê–ë–û–¢–ö–ê –î–û–ë–ê–í–õ–ï–ù–ê –î–õ–Ø –£–°–ö–û–†–ï–ù–ò–Ø!');
console.log('‚ö° + –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò!');
