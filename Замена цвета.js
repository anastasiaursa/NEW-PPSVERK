/**
 * üé® –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –£–ú–ù–û–ô –ó–ê–ú–ï–ù–´ –¶–í–ï–¢–û–í
 * –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
 */

function smartReplaceColors() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const lastRow = sheet.getLastRow();
    const lastCol = sheet.getLastColumn();
    
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: ${sheet.getName()}`);
    console.log(`–°—Ç—Ä–æ–∫: ${lastRow}, –°—Ç–æ–ª–±—Ü–æ–≤: ${lastCol}`);
    
    if (lastRow <= 1 || lastCol <= 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const range = sheet.getRange(1, 1, lastRow, lastCol);
    const values = range.getValues();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const summaryType = detectSummaryType(values, lastRow);
    console.log(`üîç –¢–∏–ø —Å–≤–æ–¥–Ω–æ–π: ${summaryType}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let row = 0; row < lastRow; row++) {
      const cellA = values[row][0];
      if (!cellA) continue;
      
      const cellText = cellA.toString().trim();
      let color = getColorForText(cellText);
      
      if (color) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –ë—Ä–µ–Ω–¥+–ì–µ–æ
        if (isBrandGeoSummary(cellText)) {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Ä–µ–Ω–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ë—Ä–µ–Ω–¥+–ì–µ–æ: "${cellText}"`);
          // –°—Ç–æ–ª–±–µ—Ü A (–±—Ä–µ–Ω–¥) —Ç–µ–º–Ω–µ–µ
          sheet.getRange(row + 1, 1).setBackground('#c9b3d9'); // –¢–µ–º–Ω—ã–π —Å–∏—Ä–µ–Ω–µ–≤—ã–π
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–±—Ä–µ–Ω–¥+–≥–µ–æ) —Å–≤–µ—Ç–ª–µ–µ
          if (lastCol > 1) {
            sheet.getRange(row + 1, 2, 1, lastCol - 1).setBackground('#f0ecf5'); // –°–≤–µ—Ç–ª—ã–π —Å–∏—Ä–µ–Ω–µ–≤—ã–π
          }
          // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏—Ä–µ–Ω–µ–≤—ã—Ö —Ñ–æ–Ω–æ–≤
          sheet.getRange(row + 1, 1, 1, lastCol).setFontColor('#000000');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç
        else if (needsGradient(cellText, summaryType)) {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è: "${cellText}" (—Ç–∏–ø: ${summaryType})`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º–Ω–µ–µ
          const shouldBeDarker = shouldElementBeDarker(cellText, summaryType);
          
          if (shouldBeDarker) {
            // –°—Ç–æ–ª–±–µ—Ü A —Ç–µ–º–Ω–µ–µ
            sheet.getRange(row + 1, 1).setBackground(getDarkColor(color));
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–µ—Ç–ª–µ–µ
            if (lastCol > 1) {
              sheet.getRange(row + 1, 2, 1, lastCol - 1).setBackground(getLightColor(color));
            }
          } else {
            // –°—Ç–æ–ª–±–µ—Ü A —Å–≤–µ—Ç–ª–µ–µ
            sheet.getRange(row + 1, 1).setBackground(getLightColor(color));
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º–Ω–µ–µ
            if (lastCol > 1) {
              sheet.getRange(row + 1, 2, 1, lastCol - 1).setBackground(getDarkColor(color));
            }
          }
          
          // –°—Ç–∞–≤–∏–º —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ñ–æ–Ω–æ–≤
          if (color === '#ffffff' || color === '#d9d2e9' || color === '#f4e6ed') {
            sheet.getRange(row + 1, 1, 1, lastCol).setFontColor('#000000');
          }
        } else {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏: "${cellText}" - ${color}`);
          // –í—Å—è —Å—Ç—Ä–æ–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è
          sheet.getRange(row + 1, 1, 1, lastCol).setBackground(color);
          
          // –î–ª—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ —Å—Ç–∞–≤–∏–º —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          if (color === '#ffffff') {
            sheet.getRange(row + 1, 1, 1, lastCol).setFontColor('#000000');
          }
        }
      }
    }
    
    // –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ä–æ—Å—Ç–∞
    colorizeGrowthText(sheet, values, lastRow, lastCol);
    
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
 */
function detectSummaryType(values, lastRow) {
  let seoCount = 0;
  let geoCount = 0;
  let brandGeoCount = 0;
  let pureGeoCount = 0;
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ (–∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ)
  const rowsToCheck = Math.min(20, lastRow);
  
  for (let row = 1; row < rowsToCheck; row++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const cellA = values[row][0];
    if (!cellA) continue;
    
    const cellText = cellA.toString().trim();
    
    if (isSeo(cellText)) {
      seoCount++;
    } else if (isBrandGeoSummary(cellText)) {
      brandGeoCount++;
    } else if (isPureGeoCode(cellText)) {
      pureGeoCount++;
    } else if (isGeo(cellText)) {
      geoCount++;
    }
  }
  
  console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: SEO=${seoCount}, GEO=${geoCount}, PureGEO=${pureGeoCount}, BrandGEO=${brandGeoCount}`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
  if (seoCount > Math.max(geoCount, brandGeoCount, pureGeoCount)) {
    return 'seo_summary';
  } else if (brandGeoCount > Math.max(seoCount, geoCount, pureGeoCount)) {
    return 'brand_geo_summary';
  } else if (pureGeoCount > Math.max(seoCount, geoCount, brandGeoCount)) {
    return 'geo_summary';
  } else if (geoCount > 0) {
    return 'geo_summary';
  }
  
  return 'mixed';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å—Ç—ã–º –ì–ï–û –∫–æ–¥–æ–º (2 –±—É–∫–≤—ã)
 */
function isPureGeoCode(text) {
  const cleanText = text.trim().toUpperCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–æ–≤–Ω–æ 2 –±—É–∫–≤—ã –∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ì–ï–û –∫–æ–¥
  if (cleanText.length === 2 && /^[A-Z]{2}$/.test(cleanText)) {
    return isGeoCode(cleanText.toLowerCase());
  }
  
  return false;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–æ–ª–±—Ü–µ A –±—ã—Ç—å —Ç–µ–º–Ω–µ–µ
 */
function shouldElementBeDarker(text, summaryType) {
  switch (summaryType) {
    case 'seo_summary':
      // –í —Å–≤–æ–¥–Ω–æ–π –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º - —Å–µ–æ—à–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–º–Ω–µ–µ
      return isSeo(text);
      
    case 'geo_summary':
      // –í —Å–≤–æ–¥–Ω–æ–π –ø–æ –ì–ï–û - –ì–ï–û –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–º–Ω–µ–µ
      return isGeo(text) || isPureGeoCode(text);
      
    case 'brand_geo_summary':
      // –í —Å–≤–æ–¥–Ω–æ–π –ø–æ –±—Ä–µ–Ω–¥+–ì–ï–û - –±—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–º–Ω–µ–µ (–≤—Å–µ–≥–¥–∞ —Å—Ç–æ–ª–±–µ—Ü A)
      return true;
      
    default:
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–ª–±–µ—Ü A —Ç–µ–º–Ω–µ–µ
      return true;
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
 */
function getColorForText(text) {
  const lower = text.toLowerCase();
  
  console.log(`üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è: "${text}"`);
  
  // 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ—Å—è—Ü–µ–≤ (—Å–æ–¥–µ—Ä–∂–∞—Ç –≥–æ–¥)
  if (/\d{4}/.test(text) && (text.includes('2024') || text.includes('2025') || text.includes('2026'))) {
    console.log(`üìÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞: ${text}`);
    return '#7f9cb9'; // –°–∏–Ω–∏–π
  }
  
  // 2. –°—Ç—Ä–æ–∫–∏ "–í—Å–µ–≥–æ"
  if (/^(–≤—Å–µ–≥–æ|–∏—Ç–æ–≥–æ|total)$/i.test(lower)) {
    console.log(`üìä –°—Ç—Ä–æ–∫–∞ "–í—Å–µ–≥–æ": ${text}`);
    return '#d9e1f2'; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
  }
  
  // 3. –°—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ –∏ "–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ" - –ë–ï–õ–´–ï!
  if (lower === '—Ä–æ—Å—Ç / –ø–∞–¥–µ–Ω–∏–µ' || 
      lower === '—Ä–æ—Å—Ç / –ø–∞–¥–µ–Ω–∏–µ %' || 
      lower === '–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ' ||
      /^–≤\s+–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ/i.test(text) ||
      lower.includes('—Ä–æ—Å—Ç') || 
      lower.includes('–ø–∞–¥–µ–Ω–∏–µ')) {
    console.log(`üìà –°—Ç—Ä–æ–∫–∞ —Ä–æ—Å—Ç–∞: ${text}`);
    return '#ffffff'; // –ë–µ–ª—ã–π
  }
  
  // 4. –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü
  if (isTableHeader(lower)) {
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: ${text}`);
    return '#b8cce4'; // –°—Ä–µ–¥–Ω–µ-–≥–æ–ª—É–±–æ–π
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ë—Ä–µ–Ω–¥+–ì–µ–æ
  if (isBrandGeoSummary(text)) {
    console.log(`üéØ –ë—Ä–µ–Ω–¥+–ì–µ–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 6. –ß–∏—Å—Ç—ã–µ –ì–ï–û –∫–æ–¥—ã (2 –±—É–∫–≤—ã)
  if (isPureGeoCode(text)) {
    console.log(`üåç –ß–∏—Å—Ç—ã–π –ì–ï–û –∫–æ–¥: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 7. –ë—Ä–µ–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ)
  if (isBrand(lower)) {
    console.log(`üè¢ –ë—Ä–µ–Ω–¥: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 8. –ì–ï–û —Å—Ç—Ä–æ–∫–∏
  if (isGeo(text)) {
    console.log(`üåç –ì–ï–û —Å—Ç—Ä–æ–∫–∞: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 9. –°–µ–æ—à–Ω–∏–∫–∏
  if (isSeo(text)) {
    console.log(`üë§ –°–µ–æ—à–Ω–∏–∫: ${text}`);
    return '#d9d2e9'; // –°–∏—Ä–µ–Ω–µ–≤—ã–π
  }
  
  // 10. –ü–æ–¥–≥—Ä—É–ø–ø—ã (—Å–≤–æ–¥–Ω—ã–µ)
  if (lower.includes('—Å–≤–æ–¥–Ω–∞—è') || text.includes('/')) {
    console.log(`üìÅ –°–≤–æ–¥–Ω–∞—è/–ø–æ–¥–≥—Ä—É–ø–ø–∞: ${text}`);
    return '#f4e6ed'; // –°–≤–µ—Ç–ª—ã–π —Ä–æ–∑–æ–≤—ã–π
  }
  
  // 11. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –±–µ–ª–æ–µ
  console.log(`‚ö™ –ë–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${text}`);
  return '#ffffff';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç (—Ç–µ–º–Ω–µ–µ A, —Å–≤–µ—Ç–ª–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
 */
function needsGradient(text, summaryType) {
  const lower = text.toLowerCase();
  
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç –ù–ï –Ω—É–∂–µ–Ω –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –ë—Ä–µ–Ω–¥+–ì–µ–æ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (isBrandGeoSummary(text)) {
    return false;
  }
  
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤–æ–¥–Ω–æ–π
  switch (summaryType) {
    case 'seo_summary':
      return isSeo(text);
      
    case 'geo_summary':
      return isGeo(text) || isPureGeoCode(text);
      
    case 'brand_geo_summary':
      return false; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      
    default:
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      return isBrand(lower) || isGeo(text) || isSeo(text) || isPureGeoCode(text);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ë—Ä–µ–Ω–¥+–ì–µ–æ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: "–ì–ï–û –ë–†–ï–ù–î", "–ì–ï–û / –ì–ï–û –ë–†–ï–ù–î", "–ë—Ä–µ–Ω–¥+–ì–ï–û"
 */
function isBrandGeoSummary(text) {
  const cleanText = text.trim();
  
  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ë—Ä–µ–Ω–¥+–ì–µ–æ: "${cleanText}"`);
  
  // –§–æ—Ä–º–∞—Ç "–ë—Ä–µ–Ω–¥+–ì–ï–û" (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  if (cleanText.includes('+')) {
    const parts = cleanText.split('+');
    if (parts.length === 2) {
      const part1 = parts[0].trim().toLowerCase();
      const part2 = parts[1].trim().toLowerCase();
      
      if ((isBrand(part1) && isGeoCode(part2)) || 
          (isGeoCode(part1) && isBrand(part2))) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–±—Ä–µ–Ω–¥+–≥–µ–æ": ${cleanText}`);
        return true;
      }
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "–ì–ï–û / –ì–ï–û –ë–†–ï–ù–î" (–Ω–∞–ø—Ä–∏–º–µ—Ä "IN / UZ PinUp")
  if (cleanText.includes(' / ') && cleanText.includes(' ')) {
    const parts = cleanText.split(' ');
    if (parts.length >= 4) { // –º–∏–Ω–∏–º—É–º "XX / XX Brand"
      const geoPart1 = parts[0].toLowerCase();
      const geoPart2 = parts[2].toLowerCase();
      const brandPart = parts.slice(3).join(' ').toLowerCase();
      
      if (isGeoCode(geoPart1) && isGeoCode(geoPart2) && isBrand(brandPart)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–≥–µ–æ / –≥–µ–æ –±—Ä–µ–Ω–¥": ${cleanText}`);
        return true;
      }
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "–ì–ï–û –ë–†–ï–ù–î" (–Ω–∞–ø—Ä–∏–º–µ—Ä "HU Mostbet", "AZ 1win")
  if (cleanText.includes(' ')) {
    const parts = cleanText.split(' ');
    
    if (parts.length >= 2) {
      const geoPart = parts[0].toLowerCase();
      const brandPart = parts.slice(1).join(' ').toLowerCase();
      
      if (isGeoCode(geoPart) && isBrand(brandPart)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç "–≥–µ–æ –±—Ä–µ–Ω–¥": ${cleanText}`);
        return true;
      }
    }
  }
  
  console.log(`‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ë—Ä–µ–Ω–¥+–ì–µ–æ: ${cleanText}`);
  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö (–ê–ö–¢–£–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö - —Ç–æ–ª—å–∫–æ 2-–±—É–∫–≤–µ–Ω–Ω—ã–µ –∫–æ–¥—ã)
 */
function isGeoCode(text) {
  const geoCodes = [
    'az', 'ru', 'uz', 'kz', 'by', 'ua', 'ge', 'am', 'md', 'tj', 'kg', 'tm',
    'hu', 'tr', 'fr', 'de', 'it', 'es', 'pt', 'gr', 'pl', 'cz', 'sk', 'bg', 'ch',
    'bd', 'np', 'in', 'pk', 'lk', 'vn', 'kr', 'jp',
    'ar', 'eg', 'ng', 'za', 'ke', 'tz', 'ug', 'sn', 'cm', 'ga', 'mz',
    'br', 'mx', 'co', 'cl', 'pe', 'ec', 'ca',
    'ww'
  ];
  const result = geoCodes.includes(text.toLowerCase());
  if (result) {
    console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –≥–µ–æ-–∫–æ–¥: ${text}`);
  }
  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–∞–±–ª–∏—Ü—ã
 */
function isTableHeader(lower) {
  const keywords = ['–æ—Ñ—Ñ–µ—Ä', '—Å–∞–π—Ç—ã', '—Å–µ–æ—à–Ω–∏–∫', '–∫–ª–∏–∫–∏', '—Ä–µ–≥–∏', 'deps', '–≤—ã—Ä—É—á–∫–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'fd', 'rd'];
  return keywords.some(word => lower.includes(word)) && 
         !lower.includes('—Ä–æ—Å—Ç') && 
         !lower.includes('–ø–∞–¥–µ–Ω–∏–µ');
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±—Ä–µ–Ω–¥–æ–º (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö)
 */
function isBrand(lower) {
  const brands = [
    'glory', 'profitpoint', 'pinup', 'pin-up', 'banzai', '1win', '22bet', 'hellspin', 
    'ivibet', 'elon', '888starz', 'weiss', 'linebet', 'betmatch', '–ø–∞—Ä–∏',
    '—Ñ–æ–Ω–±–µ—Ç', '–±–µ—Ç—Å–∏—Ç–∏', '1xbet', 'advertise', 'joycasino', 'casinox',
    'melbet', 'aslan', 'casino', '7slots.casino', 'ice casino', 'mostbet',
    'bilbet', 'bons', 'betwinner', 'platinum casino', 'leon', 'booi casino',
    'aslan casino', 'aslan —Åasino'
  ];
  
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –±—Ä–µ–Ω–¥ + 2-3 –±—É–∫–≤—ã
  for (const brand of brands) {
    if (lower === brand) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –±—Ä–µ–Ω–¥: ${lower}`);
      return true;
    }
    if (lower.startsWith(brand + ' ') && /^[a-z–∞-—è]{2,3}$/.test(lower.substring(brand.length + 1))) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –±—Ä–µ–Ω–¥ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º: ${lower}`);
      return true;
    }
    if (lower.startsWith(brand) && /^[a-z–∞-—è]{2,3}$/.test(lower.substring(brand.length))) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –±—Ä–µ–Ω–¥ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º: ${lower}`);
      return true;
    }
  }
  
  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ì–ï–û —Å—Ç—Ä–æ–∫–æ–π
 */
function isGeo(text) {
  const geoPatterns = [
    /^üá¶üáø\s*AZ/i, /^üá∑üá∫\s*RU/i, /^üá∫üáø\s*UZ/i, /^üá∞üáø\s*KZ/i, /^üáßüáæ\s*BY/i,
    /^üá∫üá¶\s*UA/i, /^üá¨üá™\s*GE/i, /^üá¶üá≤\s*AM/i, /^üá≤üá©\s*MD/i, /^üáπüáØ\s*TJ/i,
    /^üá∞üá¨\s*KG/i, /^üáπüá≤\s*TM/i, /^üá≠üá∫\s*HU/i, /^üåç\s*[A-Z]{2}/i
  ];
  
  return geoPatterns.some(pattern => pattern.test(text));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–æ—à–Ω–∏–∫–æ–º
 */
function isSeo(text) {
  if (/^üë§\s*/.test(text) || /^‚ö†Ô∏è\s*/.test(text)) return true;
  
  const seoNames = [
    '–º–∏—Ö–∞–∏–ª', '–∞–Ω–∞—Å—Ç–∞—Å–∏—è', 'alex se', '–≤–∏–∫—Ç–æ—Ä', '—ç–º–∏–ª—å', '–∫–∏—Ä–∏–ª–ª', 
    '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä –∞—Ä—Ç—é—Ö', '–º–∞–π–¥–∞', '–µ–≤–≥–µ–Ω–∏—è'
  ];
  
  const clean = text.toLowerCase().replace(/^(üë§|‚ö†Ô∏è)\s*/, '').replace(/\s*\(–∏—Å–∫–ª—é—á–µ–Ω\)$/, '');
  return seoNames.includes(clean);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ü–≤–µ—Ç–∞
 */
function getDarkColor(color) {
  const map = {
    '#d9d2e9': '#c9b3d9', // –°–∏—Ä–µ–Ω–µ–≤—ã–π -> —Ç–µ–º–Ω–µ–µ
    '#f4e6ed': '#e6c9d6', // –†–æ–∑–æ–≤—ã–π -> —Ç–µ–º–Ω–µ–µ
    '#ffffff': '#f0f0f0'  // –ë–µ–ª—ã–π -> —Å–µ—Ä—ã–π
  };
  return map[color] || color;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ—Ç–ª—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ü–≤–µ—Ç–∞
 */
function getLightColor(color) {
  const map = {
    '#d9d2e9': '#f0ecf5', // –°–∏—Ä–µ–Ω–µ–≤—ã–π -> —Å–≤–µ—Ç–ª–µ–µ
    '#f4e6ed': '#faf3f7', // –†–æ–∑–æ–≤—ã–π -> —Å–≤–µ—Ç–ª–µ–µ
    '#ffffff': '#ffffff'  // –ë–µ–ª—ã–π –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–ª—ã–º
  };
  return map[color] || color;
}

/**
 * –û–∫—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ä–æ—Å—Ç–∞
 */
function colorizeGrowthText(sheet, values, lastRow, lastCol) {
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  const headerRow = values[0];
  const growthColumns = [];
  
  for (let col = 0; col < lastCol; col++) {
    const header = headerRow[col] ? headerRow[col].toString().toLowerCase().trim() : '';
    
    if (header.includes('—Ä–æ—Å—Ç') && (header.includes('–ø–∞–¥–µ–Ω–∏–µ') || header.includes('%'))) {
      growthColumns.push(col);
    }
  }
  
  // –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
  for (const col of growthColumns) {
    for (let row = 1; row < lastRow; row++) { // –ù–∞—á–∏–Ω–∞–µ–º —Å 1, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const cellValue = values[row][col];
      
      if (cellValue === null || cellValue === undefined || cellValue === '') {
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const numericValue = parseFloat(cellValue.toString().replace(/[^\-\d.,]/g, '').replace(',', '.'));
      
      if (isNaN(numericValue)) {
        continue;
      }
      
      const cell = sheet.getRange(row + 1, col + 1);
      
      if (numericValue > 0) {
        cell.setFontColor('#00AA00'); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
      } else if (numericValue < 0) {
        cell.setFontColor('#FF0000'); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
      } else {
        cell.setFontColor('#000000'); // –ß–µ—Ä–Ω—ã–π –¥–ª—è –Ω—É–ª—è
      }
    }
  }
  
  if (growthColumns.length > 0) {
    console.log(`–û–∫—Ä–∞—à–µ–Ω —Ç–µ–∫—Å—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ä–æ—Å—Ç–∞: ${growthColumns.length}`);
  }
}
