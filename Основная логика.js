/*
 * üéØ 2 –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
 * 
 * ‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
 * ‚úÖ –ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Å–æ–∑–¥–∞—Ç—å–í—Å–µ–°–≤–æ–¥–Ω—ã–µ(), —Å–æ–∑–¥–∞—Ç—å–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å–ú–µ—Å—è—Ü–µ–≤()
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö
 * 
 * –ó–∞–≤–∏—Å–∏—Ç –æ—Ç: 1 –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò.js, 3 –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò.js
 * 
 * –í–ê–ñ–ù–û: –í–°–ï –§–£–ù–ö–¶–ò–ò –°–ö–û–ü–ò–†–û–í–ê–ù–´ –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô!
 * –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

console.log('üéØ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ê (–ò–î–ï–ù–¢–ò–ß–ù–û –ü–†–û–®–õ–û–ú–£ –ö–û–î–£ + –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø)');
console.log('üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞—Ç—å–í—Å–µ–°–≤–æ–¥–Ω—ã–µ()');
console.log('üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å–æ–∑–¥–∞—Ç—å–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å–ú–µ—Å—è—Ü–µ–≤()');

// ========================================================================
// üöÄ –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ========================================================================

/**
 * –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
 */
function —Å–æ–∑–¥–∞—Ç—å–í—Å–µ–°–≤–æ–¥–Ω—ã–µ() {
  console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –í–°–ï–• –°–í–û–î–ù–´–• (–ò–î–ï–ù–¢–ò–ß–ù–û –ü–†–û–®–õ–û–ú–£ –ö–û–î–£ + –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø)');
  console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${–ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô} ‚Üí ${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}`);
  console.log();
  
  try {
    const monthName = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
    
    // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Å—è—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    console.log(`üîç –û–¢–õ–ê–î–ö–ê: –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô = "${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}"`);
    console.log(`üîç –û–¢–õ–ê–î–ö–ê: monthName = "${monthName}"`);
    
    if (!monthName) {
      throw new Error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–Ω–∞—á–µ–Ω–∏–µ: ${monthName}`);
    }
    
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç—Ä–∏ —Ç–∏–ø–∞ —Å–≤–æ–¥–Ω—ã—Ö
    createSummaryReport(monthName);      // –ë—Ä–µ–Ω–¥—ã
    createGeoSummaryReport(monthName);   // –ì–ï–û
    
    // –î–ª—è —Å–µ–æ—à–Ω–∏–∫–æ–≤ - –í–´–ë–û–†: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º...');
    
    // –í–ê–†–ò–ê–ù–¢ 1: –ë–´–°–¢–†–û, –Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    // createSeoSummaryReportSafe(monthName);
    
    // –í–ê–†–ò–ê–ù–¢ 2: –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö  
    createSeoSummaryReport(monthName);  // –¢–µ–ø–µ—Ä—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined!
    
    console.log('2Ô∏è‚É£ –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–æ—Å—Ç–∞...');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
    if (–ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô !== –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô) {
      calculateGrowthBetweenPeriods(–ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô, –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô);
    }
    
    console.log('3Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º smartReplaceColors –∫–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
    applySmartFormattingToAllSheets(monthName);
    
    console.log('‚úÖ –í–°–ï –°–í–û–î–ù–´–ï –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–¥–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
 */
function —Å–æ–∑–¥–∞—Ç—å–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å–ú–µ—Å—è—Ü–µ–≤() {
  console.log('üìÖ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ù–´–•');
  console.log('üéØ –ú–µ—Å—è—Ü—ã: –ú–∞–π ‚Üí –ò—é–Ω—å ‚Üí –ò—é–ª—å 2025');
  console.log();
  
  const –º–µ—Å—è—Ü—ã = ['–ú–∞–π 2025', '–ò—é–Ω—å 2025', '–ò—é–ª—å 2025'];
  
  for (let i = 0; i < –º–µ—Å—è—Ü—ã.length; i++) {
    const —Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü = –º–µ—Å—è—Ü—ã[i];
    const –ø—Ä–µ–¥—ã–¥—É—â–∏–π–ú–µ—Å—è—Ü = i > 0 ? –º–µ—Å—è—Ü—ã[i - 1] : null;
    
    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${—Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
    –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô = —Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü;
    –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô = –ø—Ä–µ–¥—ã–¥—É—â–∏–π–ú–µ—Å—è—Ü || —Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü;
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
    —Å–æ–∑–¥–∞—Ç—å–í—Å–µ–°–≤–æ–¥–Ω—ã–µ();
    
    console.log(`‚úÖ ${—Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü} –≥–æ—Ç–æ–≤!`);
    console.log();
  }
  
  console.log('üéâ –í–°–ï –ú–ï–°–Ø–¶–´ –û–ë–†–ê–ë–û–¢–ê–ù–´!');
}

// ========================================================================
// üìä –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ù–´–• –¢–ê–ë–õ–ò–¶ (–ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
// ========================================================================

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –ø–æ –±—Ä–µ–Ω–¥–∞–º (–ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function createSummaryReport(monthName) {
  try {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º undefined monthName
    if (!monthName || monthName === 'undefined') {
      console.log(`‚ùå –ò–°–ü–†–ê–í–õ–Ø–ï–ú: monthName = "${monthName}" ‚Üí "${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}"`);
      monthName = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
      if (!monthName) {
        throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏ monthName –∏ –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô —Ä–∞–≤–Ω—ã undefined!`);
      }
    }
    
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º –¥–ª—è ${monthName}`);
    
    // ID —Ç–∞–±–ª–∏—Ü –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const MAIN_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–û–°–ù–û–í–ù–ê–Ø;
    const SITES_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–°–ê–ô–¢–´;
    const CURRENT_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const mainData = getMainTableData(MAIN_TABLE_ID, monthName);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö...');
    const sitesData = getSitesTableData(SITES_TABLE_ID);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
    const groupedData = groupData(mainData, sitesData);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    console.log('–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...');
    createSummarySheet(CURRENT_TABLE_ID, groupedData, monthName);
    
    console.log(`–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º "${monthName}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –ø–æ –ì–ï–û (–ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
function createGeoSummaryReport(monthName) {
  try {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º undefined monthName
    if (!monthName || monthName === 'undefined') {
      console.log(`‚ùå –ò–°–ü–†–ê–í–õ–Ø–ï–ú: monthName = "${monthName}" ‚Üí "${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}"`);
      monthName = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
      if (!monthName) {
        throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏ monthName –∏ –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô —Ä–∞–≤–Ω—ã undefined!`);
      }
    }
    
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ì–ï–û –¥–ª—è ${monthName}`);
    
    // ID —Ç–∞–±–ª–∏—Ü –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const MAIN_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–û–°–ù–û–í–ù–ê–Ø;
    const SITES_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–°–ê–ô–¢–´;
    const CURRENT_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const mainData = getMainTableDataForGeo(MAIN_TABLE_ID, monthName);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö...');
    const sitesData = getSitesTableData(SITES_TABLE_ID);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ì–ï–û
    console.log('–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ì–ï–û...');
    const groupedData = groupGeoData(mainData, sitesData);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –ì–ï–û
    console.log('–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –ì–ï–û...');
    createGeoSummarySheet(CURRENT_TABLE_ID, groupedData, monthName);
    
    console.log(`–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –ì–ï–û "${monthName}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ì–ï–û:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (–ö–û–ü–ò–Ø –ò–ó –ü–æ —Å–µ–æ—à–Ω–∏–∫–∞–º.js)
 */
/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined)
 */
function createSeoSummaryReportSafe(monthName) {
  try {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ monthName undefined, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô
    if (!monthName || monthName === 'undefined') {
      console.log(`‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º monthName: ${monthName} ‚Üí ${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}`);
      monthName = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
      
      if (!monthName) {
        throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏ monthName –∏ –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô —Ä–∞–≤–Ω—ã undefined!`);
      }
    }
    
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º –¥–ª—è ${monthName}`);
    
    // ID —Ç–∞–±–ª–∏—Ü –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const MAIN_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–û–°–ù–û–í–ù–ê–Ø;
    const SITES_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–°–ê–ô–¢–´;
    const CURRENT_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const mainData = getMainTableDataSafe(MAIN_TABLE_ID, monthName);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö...');
    const sitesData = getSitesTableData(SITES_TABLE_ID);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º
    console.log('–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º...');
    const groupedData = groupSeoData(mainData, sitesData);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (–ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø)
    console.log('–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)...');
    createSeoSummarySimple(monthName, groupedData);
    
    console.log(`‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º "${monthName}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º:', error);
    throw error;
  }
}

function createSeoSummaryReport(monthName) {
  try {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ monthName undefined, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô
    if (!monthName || monthName === 'undefined') {
      console.log(`‚ùå –ò–°–ü–†–ê–í–õ–Ø–ï–ú: monthName = "${monthName}" ‚Üí "${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}"`);
      monthName = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
      
      if (!monthName) {
        throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏ monthName –∏ –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô —Ä–∞–≤–Ω—ã undefined!`);
      }
    }
    
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º –¥–ª—è ${monthName}`);
    
    // ID —Ç–∞–±–ª–∏—Ü –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const MAIN_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–û–°–ù–û–í–ù–ê–Ø;
    const SITES_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–°–ê–ô–¢–´;
    const CURRENT_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const mainData = getMainTableData(MAIN_TABLE_ID, monthName);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö
    console.log('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö...');
    const sitesData = getSitesTableData(SITES_TABLE_ID);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º
    console.log('–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º...');
    const groupedData = groupSeoData(mainData, sitesData);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º
    console.log('–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º...');
    createSeoSummarySheet(CURRENT_TABLE_ID, groupedData, monthName);
    
    console.log(`–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º "${monthName}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–µ–æ—à–Ω–∏–∫–∞–º:', error);
    throw error;
  }
}

// ========================================================================
// üì• –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• (–ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
// ========================================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–ö–û–ü–ò–Ø –ò–ó –ì–ï–û + –±—Ä–µ–Ω–¥+–≥–µ–æ.js)
 */
/**
 * –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤)
 */
function getMainTableDataSafe(tableId, monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheet = spreadsheet.getSheetByName(monthName);
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${monthName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length < 2) {
      throw new Error(`–õ–∏—Å—Ç "${monthName}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö`);
    }
    
    const headers = values[0];
    const dataRows = values.slice(1);
    
    return dataRows.map(row => {
      const item = {};
      headers.forEach((header, index) => {
        if (header) item[header] = row[index];
      });
      return item;
    });
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:`, error);
    throw error;
  }
}

function getMainTableData(tableId, monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheet = spreadsheet.getSheetByName(monthName);
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${monthName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
    const data = [];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 1), —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–∞—è - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!row[0] && !row[16]) continue; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü A (–°–µ–æ—à–Ω–∏–∫) –∏ Q (–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
      
      data.push({
        seoSpecialist: row[0] || '', // A - –°–µ–æ—à–Ω–∏–∫
        clicks: parseFloat(row[4]) || 0, // E - –ö–ª–∏–∫–∏
        registrations: parseFloat(row[5]) || 0, // F - –†–µ–≥–∏
        fd: parseFloat(row[6]) || 0, // G - FD
        rd: parseFloat(row[7]) || 0, // H - RD
        deposits: parseFloat(row[8]) || 0, // I - Deps
        revenueUSD: parseFloat(row[13]) || 0, // N - –í—ã—Ä—É—á–∫–∞ / USD
        identifier: row[16] || '', // Q - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        brand: row[21] || '', // V - –ë—Ä–µ–Ω–¥
        geo: row[22] || '', // W - –ì–ï–û
        brandGeo: row[23] || '', // X - –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥+–≥–µ–æ
        stream: row[24] || '' // Y - –ü–æ—Ç–æ–∫
      });
    }
    
    return data;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ì–ï–û (—Å —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω)
 */
function getMainTableDataForGeo(tableId, monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheet = spreadsheet.getSheetByName(monthName);
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${monthName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
    const data = [];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 1), —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–∞—è - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!row[0] && !row[16]) continue;
      
      const geoCode = row[22] || ''; // W - –ì–ï–û
      const geoDisplayName = –ø–æ–ª—É—á–∏—Ç—å–°—Ç—Ä–∞–Ω—É(geoCode); // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: —Ñ–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω
      
      data.push({
        seoSpecialist: row[0] || '',
        clicks: parseFloat(row[4]) || 0,
        registrations: parseFloat(row[5]) || 0,
        fd: parseFloat(row[6]) || 0,
        rd: parseFloat(row[7]) || 0,
        deposits: parseFloat(row[8]) || 0,
        revenueUSD: parseFloat(row[13]) || 0,
        identifier: row[16] || '',
        brand: row[21] || '',
        geo: geoCode,
        geoDisplayName: geoDisplayName, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Ñ–ª–∞–≥–æ–º
        brandGeo: row[23] || '',
        stream: row[24] || ''
      });
    }
    
    return data;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ì–ï–û:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–∞—Ö (–ö–û–ü–ò–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê)
 */
function getSitesTableData(tableId) {
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheets = spreadsheet.getSheets();
    
    const sitesData = {};
    
    // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤ –∫ –∏–º–µ–Ω–∞–º —Å–µ–æ—à–Ω–∏–∫–æ–≤
    const seoMapping = {
      '–ú–∏—Ö–∞–∏–ª': '–ú–∏—Ö–∞–∏–ª',
      '–ê–Ω–∞—Å—Ç–∞—Å–∏—è': '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
      '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      'Alex SE': 'Alex SE',
      '–í–∏–∫—Ç–æ—Ä': '–í–∏–∫—Ç–æ—Ä',
      '–≠–º–∏–ª—å': '–≠–º–∏–ª—å',
      '–ö–∏—Ä–∏–ª–ª': '–ö–∏—Ä–∏–ª–ª',
      '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
      '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê—Ä—Ç—é—Ö': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê—Ä—Ç—é—Ö',
      '–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–µ—Ä–∞': '–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–µ—Ä–∞',
      '–ú–∞–π–¥–∞': '–ú–∞–π–¥–∞',
      '–ï–≤–≥–µ–Ω–∏—è': '–ï–≤–≥–µ–Ω–∏—è',
      '–†–µ–¥–∏—Ä–µ–∫—Ç —Å —Ü–º—Å': '–†–µ–¥–∏—Ä–µ–∫—Ç —Å —Ü–º—Å',
      'Dragon': 'Dragon',
      '–ù–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞': '–ù–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞'
    };
    
    sheets.forEach(sheet => {
      const sheetName = sheet.getName();
      let seoName = seoMapping[sheetName] || '–ú–∏—Ö–∞–∏–ª';
      
      const dataRange = sheet.getDataRange();
      const values = dataRange.getValues();
      
      if (values.length < 2) return;
      
      for (let i = 1; i < values.length; i++) {
        const row = values[i];
        
        if (!row[0] && !row[12]) continue;
        
        const identifier = row[12] || '';
        const site = row[0] || '';
        const clicks = parseFloat(row[4]) || 0;
        
        if (identifier) {
          if (!sitesData[identifier]) {
            sitesData[identifier] = [];
          }
          
          sitesData[identifier].push({
            site: site,
            clicks: clicks,
            seoSpecialist: seoName,
            isExcluded: –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–°–ï–û–®–ù–ò–ö–ò.includes(seoName)
          });
        }
      }
    });
    
    return sitesData;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–π—Ç–∞—Ö:', error);
    throw error;
  }
}

// ========================================================================
// üìà –†–ê–°–ß–ï–¢ –†–û–°–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
// ========================================================================

/**
 * üìà –û–¢–î–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –†–û–°–¢–ê –ú–ï–ñ–î–£ –ú–ï–°–Ø–¶–ê–ú–ò
 * 
 * –ë–µ—Ä–µ—Ç 2 –º–µ—Å—è—Ü–∞ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞:
 * - –ü–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã)
 * - –ü–æ —Å—Ç–æ–ª–±—Ü–∞–º –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * - –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å–†–æ—Å—Ç–ú–µ–∂–¥—É–ú–µ—Å—è—Ü–∞–º–∏() {
  const baseMonth = –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô;
  const currentMonth = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
  
  console.log(`üìà –û–¢–î–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ ${baseMonth} ‚Üí ${currentMonth}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Å—è—Ü—ã —Ä–∞–∑–Ω—ã–µ
  if (baseMonth === currentMonth) {
    console.log('‚ö†Ô∏è –ú–µ—Å—è—Ü—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è');
    return;
  }
  
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    
    // –õ–∏—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const sheets = [
      `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${currentMonth}`
    ];
    
    sheets.forEach(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      if (!sheet) return;
      
      console.log(`  üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: ${sheetName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const baseSheetName = sheetName.replace(currentMonth, baseMonth);
      const baseSheet = spreadsheet.getSheetByName(baseSheetName);
      
      if (!baseSheet) {
        console.log(`  ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –ª–∏—Å—Ç ${baseSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞`);
        return;
      }
      
      const currentData = sheet.getDataRange().getValues();
      const baseData = baseSheet.getDataRange().getValues();
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ë–ï–ó —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      processGrowthData(sheet, currentData, baseData);
      
      // –ù–û–í–û–ï: –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
      fillGrowthRowsForClusters(sheet, currentData, baseData);
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —è—á–µ–π–∫–∞–º —Ä–æ—Å—Ç–∞
      applyGrowthColorFormatting(sheet, currentData);
      
      console.log(`  ‚úÖ –†–æ—Å—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: ${sheetName}`);
    });
    
    console.log('üéâ –†–ê–°–ß–ï–¢ –†–û–°–¢–ê –ú–ï–ñ–î–£ –ú–ï–°–Ø–¶–ê–ú–ò –ó–ê–í–ï–†–®–ï–ù!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–æ—Å—Ç–∞ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏:', error);
    throw error;
  }
}

/**
 * –°–¢–ê–†–ê–Ø –§–£–ù–ö–¶–ò–Ø - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
function calculateGrowthBetweenPeriods(baseMonth, currentMonth) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—è—Ü—ã –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô = baseMonth;
  –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô = currentMonth;
  
  // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
  —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å–†–æ—Å—Ç–ú–µ–∂–¥—É–ú–µ—Å—è—Ü–∞–º–∏();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–æ—Å—Ç–∞ (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã)
 */
function processGrowthData(sheet, currentData, baseData) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
  for (let row = 0; row < currentData.length; row++) {
    const rowName = currentData[row][0];
    if (!rowName || rowName.toString().trim() === '') continue;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ (–æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    if (rowName.toString().includes('–†–æ—Å—Ç') || rowName.toString().includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ')) continue;
    
    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const baseRow = findMatchingRow(baseData, rowName);
    if (!baseRow) continue;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    calculateRowGrowthAllColumns(sheet, row + 1, currentData[row], baseRow);
  }
}

/**
 * –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */
function calculateRowGrowthAllColumns(sheet, rowNumber, currentRow, baseRow) {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è batch-–æ–±—Ä–∞–±–æ—Ç–∫–∏
  const updates = [];
  
  –°–¢–û–õ–ë–¶–´_–†–û–°–¢–ê.forEach(config => {
    // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    const currentValue = parseFloat(currentRow[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1]) || 0;
    const baseValue = parseFloat(baseRow[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1]) || 0;
    
    // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–æ—Å—Ç (–ë–ï–ó .00 –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª)
    const absoluteGrowth = currentValue - baseValue;
    updates.push({
      row: rowNumber,
      col: config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞,
      value: formatNumberWithoutUnnecessaryDecimals(absoluteGrowth)
    });
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤)
    const percentGrowth = calculateCorrectGrowthPercent(baseValue, currentValue);
    const cleanPercentValue = parseFloat(percentGrowth.replace('%', '')).toFixed(2) + '%';
    updates.push({
      row: rowNumber,
      col: config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞,
      value: cleanPercentValue
    });
  });
  
  // –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø BATCH-–û–ü–ï–†–ê–¶–ò–Ø: –æ–¥–∏–Ω –≤—ã–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —Ä–æ—Å—Ç–∞
  if (updates.length > 0) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    const rangeData = sheet.getRange(rowNumber, 1, 1, 35).getValues()[0];
    
    updates.forEach(update => {
      rangeData[update.col - 1] = update.value;
    });
    
    // –û–î–ò–ù –≤—ã–∑–æ–≤ setValues –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
    sheet.getRange(rowNumber, 1, 1, 35).setValues([rangeData]);
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —è—á–µ–π–∫–∞–º —Ä–æ—Å—Ç–∞
 */
function applyGrowthColorFormatting(sheet, currentData) {
  console.log('  üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —è—á–µ–π–∫–∞–º —Ä–æ—Å—Ç–∞...');
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const colorOperations = [];
  
  for (let row = 0; row < currentData.length; row++) {
    const rowName = currentData[row][0];
    if (!rowName || rowName.toString().trim() === '') continue;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞
    if (rowName.toString().includes('–†–æ—Å—Ç') || rowName.toString().includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ')) continue;
    
    const rowNum = row + 1;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    –°–¢–û–õ–ë–¶–´_–†–û–°–¢–ê.forEach(config => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ—Å—Ç–∞
        const absoluteGrowth = sheet.getRange(rowNum, config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞).getValue();
        const percentGrowth = sheet.getRange(rowNum, config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞).getValue();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        const absoluteColor = getGrowthColor(absoluteGrowth);
        const percentColor = getGrowthColor(percentGrowth);
        
        if (absoluteColor) {
          colorOperations.push({row: rowNum, col: config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞, color: absoluteColor});
        }
        if (percentColor) {
          colorOperations.push({row: rowNum, col: config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞, color: percentColor});
        }
      } catch (error) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —è—á–µ–π–∫–∏
      }
    });
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–∏–º batch'–µ–º
  if (colorOperations.length > 0) {
    applyColorOperationsBatch(sheet, colorOperations);
  }
  
  console.log(`  ‚úÖ –¶–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
}

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å batch –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function applyColorOperationsBatch(sheet, operations) {
  operations.forEach(op => {
    try {
      sheet.getRange(op.row, op.col).setFontColor(op.color);
    } catch (error) {
      console.log(`    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫ —è—á–µ–π–∫–µ ${op.row},${op.col}: ${error.message}`);
    }
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –±–µ–∑ –Ω–µ–Ω—É–∂–Ω—ã—Ö .00 –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
 */
function formatNumberWithoutUnnecessaryDecimals(value) {
  const numValue = parseFloat(value) || 0;
  
  // –ï—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
  if (numValue === Math.floor(numValue)) {
    return numValue.toString();
  }
  
  // –ò–Ω–∞—á–µ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  return numValue.toFixed(2);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ—Å—Ç–∞
 */
function getGrowthColor(value) {
  const numValue = parseFloat(value) || 0;
  
  if (numValue > 0) {
    return –¶–í–ï–¢–ê.–†–û–°–¢;        // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
  } else if (numValue < 0) {
    return –¶–í–ï–¢–ê.–ü–ê–î–ï–ù–ò–ï;     // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
  } else {
    return –¶–í–ï–¢–ê.–ë–ï–ó_–ò–ó–ú–ï–ù–ï–ù–ò–ô; // –°–µ—Ä—ã–π –¥–ª—è –Ω—É–ª—è
  }
}

/**
 * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function ensureMainDataBlackColor(sheet, rowNumber) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞)
  const mainDataColumns = [1, 2, 3, 4, 8, 12, 16, 20, 22, 25, 29]; // A, B, C, D, H, L, P, T, V, Y, AC
  
  mainDataColumns.forEach(colNum => {
    sheet.getRange(rowNumber, colNum).setFontColor('#000000'); // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
  });
}

/**
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
function fillRowGrowthColumnsCorrect(sheet, rowNumber, currentRow, baseRow) {
  // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
  calculateRowGrowthAllColumns(sheet, rowNumber, currentRow, baseRow);
}

/**
 * –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function findMatchingRow(baseData, rowName) {
  for (let i = 0; i < baseData.length; i++) {
    if (baseData[i][0] && baseData[i][0].toString().trim() === rowName.toString().trim()) {
      return baseData[i];
    }
  }
  return null;
}

/**
 * –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–æ—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
 */
function calculateCorrectGrowthPercent(baseValue, currentValue) {
  // –ï—Å–ª–∏ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0
  if (baseValue === 0) {
    if (currentValue === 0) return '0.00%';
    return '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ';
  }
  
  // –ï—Å–ª–∏ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –∞ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
  if (baseValue < 0 && currentValue > 0) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç —É–±—ã—Ç–∫–∞ –∫ –ø—Ä–∏–±—ã–ª–∏
    const totalChange = Math.abs(baseValue) + currentValue;
    const percentChange = (totalChange / Math.abs(baseValue)) * 100;
    return `+${percentChange.toFixed(2)}%`;
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
  const percentChange = ((currentValue - baseValue) / Math.abs(baseValue)) * 100;
  const sign = percentChange >= 0 ? '+' : '';
  return `${sign}${percentChange.toFixed(2)}%`;
}

// ========================================================================
// üé® –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
// ========================================================================

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å smartReplaceColors –∫–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
 */
function applySmartFormattingToAllSheets(monthName) {
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    
    const sheets = [
      `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${monthName}`,
      `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${monthName}`,
      `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${monthName}`
    ];
    
    sheets.forEach(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      if (sheet) {
        try {
          console.log(`  üé® –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: ${sheetName}`);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è smartReplaceColors
          spreadsheet.setActiveSheet(sheet);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          Utilities.sleep(100);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          const activeSheet = SpreadsheetApp.getActiveSheet();
          if (activeSheet.getName() !== sheetName) {
            console.log(`‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: ${activeSheet.getName()}, –æ–∂–∏–¥–∞–µ–º—ã–π: ${sheetName}`);
            // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
            spreadsheet.setActiveSheet(sheet);
            Utilities.sleep(100);
          }
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º smartReplaceColors (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–∞–π–ª–µ 3)
          smartReplaceColors();
          
          console.log(`  ‚úÖ –õ–∏—Å—Ç ${sheetName} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω`);
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –ª–∏—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        }
      }
    });
    
    console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
}

// ========================================================================
// üöÄ –ë–´–°–¢–†–´–ï –§–£–ù–ö–¶–ò–ò –° BATCH-–û–ë–†–ê–ë–û–¢–ö–û–ô (–ù–û–í–û–ï)
// ========================================================================

/**
 * –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û (–ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø)
 */
function —Å–æ–∑–¥–∞—Ç—å–í—Å–µ–°–≤–æ–¥–Ω—ã–µ–ë—ã—Å—Ç—Ä–æ() {
  console.log('üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û–ï –°–û–ó–î–ê–ù–ò–ï –í–°–ï–• –°–í–û–î–ù–´–•');
  console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${–ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô} ‚Üí ${–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô}`);
  console.log('‚ö° –≠–¢–ê–ü 1: –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
  console.log();
  
  const totalStartTime = new Date();
  
  try {
    const monthName = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
    
    console.log('1Ô∏è‚É£ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ–º
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    const MAIN_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–û–°–ù–û–í–ù–ê–Ø;
    const SITES_TABLE_ID = –¢–ê–ë–õ–ò–¶–´.–°–ê–ô–¢–´;
    
    const mainData = getMainTableData(MAIN_TABLE_ID, monthName);
    const mainDataGeo = getMainTableDataForGeo(MAIN_TABLE_ID, monthName);
    const sitesData = getSitesTableData(SITES_TABLE_ID);
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${mainData.length} —Å—Ç—Ä–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, ${Object.keys(sitesData).length} –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–∞–π—Ç–æ–≤`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    console.log('üîÑ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
    const groupedBrandData = groupData(mainData, sitesData);
    const groupedGeoData = groupGeoData(mainDataGeo, sitesData);
    const groupedSeoData = groupSeoData(mainData, sitesData);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–µ –¢–û–õ–¨–ö–û –î–ê–ù–ù–´–ï (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
    console.log('‚ö° –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –î–ê–ù–ù–´–ï –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏...');
    
    // –ë—Ä–µ–Ω–¥+–ì–µ–æ - –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    createSummarySheetFast(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢, groupedBrandData, monthName);
    
    // –ì–ï–û - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–æ—Ç timeout)
    console.log('‚ö° –°–æ–∑–¥–∞–µ–º –ì–ï–û —Å–≤–æ–¥–Ω—É—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');
    createGeoSummarySimple(monthName, groupedGeoData);
    
    // –°–µ–æ—à–Ω–∏–∫–∏ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–æ—Ç timeout) 
    console.log('‚ö° –°–æ–∑–¥–∞–µ–º –°–µ–æ—à–Ω–∏–∫–∏ —Å–≤–æ–¥–Ω—É—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');
    createSeoSummarySimple(monthName, groupedSeoData);
    
    console.log('2Ô∏è‚É£ –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–æ—Å—Ç–∞...');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
    if (–ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô !== –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô) {
      calculateGrowthBetweenPeriods(–ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô, –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô);
    }
    
    const totalEndTime = new Date();
    const totalExecutionTime = (totalEndTime - totalStartTime) / 1000;
    
    console.log('‚úÖ –í–°–ï –°–í–û–î–ù–´–ï –°–û–ó–î–ê–ù–´ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û (–ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø)!');
    console.log(`‚ö° –í–†–ï–ú–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ê–ù–ù–´–•: ${totalExecutionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    
    // –≠–¢–ê–ü 2: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log();
    console.log('üé® –≠–¢–ê–ü 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    const formatStartTime = new Date();
    
    applySmartFormattingToAllSheets(monthName);
    
    const formatEndTime = new Date();
    const formatExecutionTime = (formatEndTime - formatStartTime) / 1000;
    const totalWithFormatTime = (formatEndTime - totalStartTime) / 1000;
    
    console.log(`üé® –í–†–ï–ú–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø: ${formatExecutionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üèÅ –û–ë–©–ï–ï –í–†–ï–ú–Ø: ${totalWithFormatTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${totalExecutionTime.toFixed(1)}—Å –¥–∞–Ω–Ω—ã–µ + ${formatExecutionTime.toFixed(1)}—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–¥–Ω—ã—Ö –ë–´–°–¢–†–û –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
 */
function —Å–æ–∑–¥–∞—Ç—å–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å–ú–µ—Å—è—Ü–µ–≤–ë—ã—Å—Ç—Ä–æ() {
  console.log('üöÄ –ë–´–°–¢–†–û–ï –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ù–´–•');
  console.log('üéØ –ú–µ—Å—è—Ü—ã: –ú–∞–π ‚Üí –ò—é–Ω—å ‚Üí –ò—é–ª—å 2025');
  console.log('‚ö° –° batch-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!');
  console.log();
  
  const totalStartTime = new Date();
  const –º–µ—Å—è—Ü—ã = ['–ú–∞–π 2025', '–ò—é–Ω—å 2025', '–ò—é–ª—å 2025'];
  
  for (let i = 0; i < –º–µ—Å—è—Ü—ã.length; i++) {
    const —Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü = –º–µ—Å—è—Ü—ã[i];
    const –ø—Ä–µ–¥—ã–¥—É—â–∏–π–ú–µ—Å—è—Ü = i > 0 ? –º–µ—Å—è—Ü—ã[i - 1] : null;
    
    console.log(`üìä –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${—Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
    –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô = —Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü;
    –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô = –ø—Ä–µ–¥—ã–¥—É—â–∏–π–ú–µ—Å—è—Ü || —Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü;
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –ë–´–°–¢–†–û
    —Å–æ–∑–¥–∞—Ç—å–í—Å–µ–°–≤–æ–¥–Ω—ã–µ–ë—ã—Å—Ç—Ä–æ();
    
    console.log(`‚úÖ ${—Ç–µ–∫—É—â–∏–π–ú–µ—Å—è—Ü} –≥–æ—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ!`);
    console.log();
  }
  
  const totalEndTime = new Date();
  const totalExecutionTime = (totalEndTime - totalStartTime) / 1000;
  
  console.log('üéâ –í–°–ï –ú–ï–°–Ø–¶–´ –û–ë–†–ê–ë–û–¢–ê–ù–´ –ë–´–°–¢–†–û!');
  console.log(`‚ö° –û–ë–©–ï–ï –í–†–ï–ú–Ø: ${totalExecutionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
  console.log(`üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${(totalExecutionTime / –º–µ—Å—è—Ü—ã.length).toFixed(2)} —Å–µ–∫/–º–µ—Å—è—Ü`);
}

/**
 * Batch-—á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
 */
function getMainTableDataBatch(tableId, monthName) {
  console.log('üì• Batch-—á—Ç–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
  
  try {
    const spreadsheet = SpreadsheetApp.openById(tableId);
    const sheet = spreadsheet.getSheetByName(monthName);
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${monthName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${values.length} —Å—Ç—Ä–æ–∫ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤`);
    
    if (values.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
    const data = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–∞–º—è—Ç–∏ (–±—ã—Å—Ç—Ä–æ)
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      
      if (!row[0] && !row[16]) continue;
      
      data.push({
        seoSpecialist: row[0] || '',
        clicks: parseFloat(row[4]) || 0,
        registrations: parseFloat(row[5]) || 0,
        fd: parseFloat(row[6]) || 0,
        rd: parseFloat(row[7]) || 0,
        deposits: parseFloat(row[8]) || 0,
        revenueUSD: parseFloat(row[13]) || 0,
        identifier: row[16] || '',
        brand: row[21] || '',
        geo: row[22] || '',
        brandGeo: row[23] || '',
        stream: row[24] || ''
      });
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    return data;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ batch-—á—Ç–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  }
}

// ========================================================================
// üìà –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –°–¢–†–û–ö –†–û–°–¢–ê –ü–û –ö–õ–ê–°–¢–ï–†–ê–ú (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨)
// ========================================================================

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö
 */
function fillGrowthRowsForClusters(sheet, currentData, baseData) {
  console.log('  üìà –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º...');
  
  let processedGrowthRows = 0;
  
  for (let row = 0; row < currentData.length; row++) {
    const rowName = currentData[row][0];
    if (!rowName) continue;
    
    const rowStr = rowName.toString().trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ä–æ—Å—Ç–∞
    if (rowStr === '–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ' || rowStr === '–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ') {
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä)
      const parentRow = findParentDataRow(currentData, row);
      if (!parentRow) continue;
      
      const parentName = parentRow[0];
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const baseParentRow = findMatchingRow(baseData, parentName);
      if (!baseParentRow) continue;
      
      try {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Ä–æ—Å—Ç–∞ –¥–∞–Ω–Ω—ã–º–∏
        fillGrowthRowData(sheet, row + 1, parentRow, baseParentRow, rowStr === '–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ');
        processedGrowthRows++;
      } catch (error) {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ "${rowStr}": ${error.message}`);
      }
    }
  }
  
  console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞: ${processedGrowthRows}`);
}

/**
 * –ù–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä)
 */
function findParentDataRow(data, currentRowIndex) {
  for (let i = currentRowIndex - 1; i >= 0; i--) {
    const rowName = data[i][0];
    if (!rowName) continue;
    
    const rowStr = rowName.toString().trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (rowStr === '–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ' || 
        rowStr === '–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ' || 
        rowStr === '–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ' ||
        rowStr === '' ||
        rowStr.includes('–û—Ñ—Ñ–µ—Ä') ||
        rowStr.includes('–°–µ–æ—à–Ω–∏–∫') ||
        rowStr.includes('–ö–ª–∏–∫–∏')) {
      continue;
    }
    
    return data[i];
  }
  return null;
}

/**
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ä–æ—Å—Ç–∞ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –ü–û –í–°–ï–ú –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * 
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è —Å—Ç—Ä–æ–∫ "–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ" –∏ "–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"!
 * –û–Ω–∞ –ù–ï –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "% –æ—Ç –æ–±—â–µ–≥–æ" –≤ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö!
 */
function fillGrowthRowData(sheet, rowNumber, currentParentRow, baseParentRow, isPercentRow) {
  // –ü–æ–ª—É—á–∞–µ–º –û–ë–©–ò–ï –ò–¢–û–ì–ò –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ "% –æ—Ç –æ–±—â–µ–≥–æ"
  const currentData = sheet.getDataRange().getValues();
  const grandTotalsCurrentMonth = –Ω–∞–π—Ç–∏–ò—Ç–æ–≥–æ–≤—É—é–°—Ç—Ä–æ–∫—É(currentData);
  
  // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞)
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const baseMonth = –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô;
  const currentMonth = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
  const currentSheetName = sheet.getName();
  const baseSheetName = currentSheetName.replace(currentMonth, baseMonth);
  const baseSheet = spreadsheet.getSheetByName(baseSheetName);
  
  let grandTotalsBaseMonth = null;
  if (baseSheet) {
    const baseData = baseSheet.getDataRange().getValues();
    grandTotalsBaseMonth = –Ω–∞–π—Ç–∏–ò—Ç–æ–≥–æ–≤—É—é–°—Ç—Ä–æ–∫—É(baseData);
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è batch-–æ–±—Ä–∞–±–æ—Ç–∫–∏
  const valuesToSet = [];
  const colorsToSet = [];
  const maxColumn = 35; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã
  for (let col = 1; col <= maxColumn; col++) {
    valuesToSet[col - 1] = null;
    colorsToSet[col - 1] = null;
  }
  
  –°–¢–û–õ–ë–¶–´_–†–û–°–¢–ê.forEach(config => {
    const currentValue = parseFloat(currentParentRow[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1]) || 0;
    const baseValue = parseFloat(baseParentRow[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1]) || 0;
    const absoluteGrowth = currentValue - baseValue;
    const percentGrowth = calculateCorrectGrowthPercent(baseValue, currentValue);
    
    if (isPercentRow) {
      // –°—Ç—Ä–æ–∫–∞ "–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ" - –∑–∞–ø–æ–ª–Ω—è–µ–º –û–°–ù–û–í–ù–´–ï —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
      
      // 1. –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤)
      valuesToSet[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1] = parseFloat(percentGrowth.replace('%', '')).toFixed(2) + '%';
      colorsToSet[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1] = getGrowthColor(absoluteGrowth);
      
      // 2. –°—Ç–æ–ª–±–µ—Ü "% –æ—Ç –æ–±—â–µ–≥–æ" - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∏ –æ—Ç –û–ë–©–ò–• –ò–¢–û–ì–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
      const percentColumn = config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö + 1;
      if (percentColumn <= maxColumn && percentColumn !== config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞ && percentColumn !== config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞) {
        // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –û–ë–©–ò–• –∏—Ç–æ–≥–æ–≤ –ª–∏—Å—Ç–∞
        let currentPercent = 0;
        let basePercent = 0;
        
        if (grandTotalsCurrentMonth) {
          const grandTotalCurrent = getGrandTotalByConfigName(grandTotalsCurrentMonth, config.–Ω–∞–∑–≤–∞–Ω–∏–µ);
          currentPercent = grandTotalCurrent > 0 ? (currentValue / grandTotalCurrent * 100) : 0;
        }
        
        if (grandTotalsBaseMonth) {
          const grandTotalBase = getGrandTotalByConfigName(grandTotalsBaseMonth, config.–Ω–∞–∑–≤–∞–Ω–∏–µ);  
          basePercent = grandTotalBase > 0 ? (baseValue / grandTotalBase * 100) : 0;
        }
        
        const percentChange = currentPercent - basePercent;
        valuesToSet[percentColumn - 1] = percentChange.toFixed(2) + '%';
        colorsToSet[percentColumn - 1] = getGrowthColor(percentChange);
      }
      
      // 3. –°—Ç–æ–ª–±–µ—Ü —Ä–æ—Å—Ç–∞ % - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤)
      if (config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞ <= maxColumn) {
        valuesToSet[config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞ - 1] = parseFloat(percentGrowth.replace('%', '')).toFixed(2) + '%';
        colorsToSet[config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞ - 1] = getGrowthColor(absoluteGrowth);
      }
      
    } else {
      // –°—Ç—Ä–æ–∫–∞ "–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ" - –∑–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï —Å—Ç–æ–ª–±—Ü—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      
      // 1. –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–∞–Ω–Ω—ã—Ö - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–æ—Å—Ç (–ë–ï–ó .00 –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª)
      valuesToSet[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1] = formatNumberWithoutUnnecessaryDecimals(absoluteGrowth);
      colorsToSet[config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö - 1] = getGrowthColor(absoluteGrowth);
      
      // 2. –°—Ç–æ–ª–±–µ—Ü "% –æ—Ç –æ–±—â–µ–≥–æ" - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∏ –æ—Ç –û–ë–©–ò–• –ò–¢–û–ì–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
      const percentColumn = config.—Å—Ç–æ–ª–±–µ—Ü_–¥–∞–Ω–Ω—ã—Ö + 1;
      if (percentColumn <= maxColumn && percentColumn !== config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞ && percentColumn !== config.—Å—Ç–æ–ª–±–µ—Ü_–ø—Ä–æ—Ü–µ–Ω—Ç–∞) {
        // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –û–ë–©–ò–• –∏—Ç–æ–≥–æ–≤ –ª–∏—Å—Ç–∞
        let currentPercent = 0;
        let basePercent = 0;
        
        if (grandTotalsCurrentMonth) {
          const grandTotalCurrent = getGrandTotalByConfigName(grandTotalsCurrentMonth, config.–Ω–∞–∑–≤–∞–Ω–∏–µ);
          currentPercent = grandTotalCurrent > 0 ? (currentValue / grandTotalCurrent * 100) : 0;
        }
        
        if (grandTotalsBaseMonth) {
          const grandTotalBase = getGrandTotalByConfigName(grandTotalsBaseMonth, config.–Ω–∞–∑–≤–∞–Ω–∏–µ);
          basePercent = grandTotalBase > 0 ? (baseValue / grandTotalBase * 100) : 0;
        }
        
        const percentChange = currentPercent - basePercent;
        valuesToSet[percentColumn - 1] = percentChange.toFixed(2) + '%';
        colorsToSet[percentColumn - 1] = getGrowthColor(percentChange);
      }
      
      // 3. –°—Ç–æ–ª–±–µ—Ü –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–æ—Å—Ç (–ë–ï–ó .00 –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª)
      if (config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞ <= maxColumn) {
        valuesToSet[config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞ - 1] = formatNumberWithoutUnnecessaryDecimals(absoluteGrowth);
        colorsToSet[config.—Å—Ç–æ–ª–±–µ—Ü_—Ä–æ—Å—Ç–∞ - 1] = getGrowthColor(absoluteGrowth);
      }
    }
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–π—Ç–æ–≤ –∏ —Å–µ–æ—à–Ω–∏–∫–æ–≤
  fillAdditionalGrowthColumnsFast(valuesToSet, colorsToSet, currentParentRow, baseParentRow, isPercentRow);
  
  // –°–ê–ú–ê–Ø –ë–´–°–¢–†–ê–Ø BATCH-–û–ü–ï–†–ê–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —è—á–µ–π–∫–∏
  const currentRowData = sheet.getRange(rowNumber, 1, 1, maxColumn).getValues()[0];
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —è—á–µ–π–∫–∏ –≥–¥–µ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  for (let col = 0; col < maxColumn; col++) {
    if (valuesToSet[col] !== null) {
      currentRowData[col] = valuesToSet[col];
    }
  }
  
  // –û–î–ò–ù –≤—ã–∑–æ–≤ setValues –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!
  sheet.getRange(rowNumber, 1, 1, maxColumn).setValues([currentRowData]);
  
  // –ë–´–°–¢–†–û–ï —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
  const rangeUpdates = [];
  for (let col = 0; col < maxColumn; col++) {
    if (colorsToSet[col] !== null) {
      rangeUpdates.push({col: col + 1, color: colorsToSet[col]});
    }
  }
  
  // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ batch'–µ–º
  if (rangeUpdates.length > 0) {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞ –≤ –æ–¥–∏–Ω Range –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    rangeUpdates.forEach(update => {
      sheet.getRange(rowNumber, update.col).setFontColor(update.color);
    });
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –æ–±—â–µ–≥–æ (–£–°–¢–ê–†–ï–õ–ê - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø)
 * 
 * ‚ö†Ô∏è –ó–ê–ú–ï–ù–ï–ù–ê –ù–ê: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ grandTotalsCurrentMonth –∏ grandTotalsBaseMonth
 */
function calculateRowTotals(rowData) {
  return {
    '–ö–ª–∏–∫–∏': parseFloat(rowData[3]) || 0,        // D
    '–†–µ–≥–∏': parseFloat(rowData[7]) || 0,         // H  
    'FD': parseFloat(rowData[11]) || 0,          // L
    'RD': parseFloat(rowData[15]) || 0,          // P
    '–†–∞—Å—Ö–æ–¥': parseFloat(rowData[21]) || 0,      // V
    '–í—ã—Ä—É—á–∫–∞': parseFloat(rowData[24]) || 0,     // Y  
    '–ü—Ä–∏–±—ã–ª—å': parseFloat(rowData[28]) || 0      // AC
  };
}

/**
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ (—Å–∞–π—Ç—ã, —Å–µ–æ—à–Ω–∏–∫–∏ –∏ —Ç.–¥.) - –ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø
 */
function fillAdditionalGrowthColumnsFast(valuesToSet, colorsToSet, currentParentRow, baseParentRow, isPercentRow) {
  // –°—Ç–æ–ª–±–µ—Ü B: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º
  const currentSites = parseFloat(currentParentRow[1]) || 0;
  const baseSites = parseFloat(baseParentRow[1]) || 0;
  const sitesGrowth = currentSites - baseSites;
  
  if (isPercentRow) {
    const sitesPercentGrowth = calculateCorrectGrowthPercent(baseSites, currentSites);
    valuesToSet[1] = parseFloat(sitesPercentGrowth.replace('%', '')).toFixed(2) + '%'; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    colorsToSet[1] = getGrowthColor(sitesGrowth);
  } else {
    valuesToSet[1] = formatNumberWithoutUnnecessaryDecimals(sitesGrowth); // –ë–ï–ó .00 –¥–ª—è —Ü–µ–ª—ã—Ö
    colorsToSet[1] = getGrowthColor(sitesGrowth);
  }
  
  // –°—Ç–æ–ª–±–µ—Ü C: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤
  const currentSeos = parseFloat(currentParentRow[2]) || 0;
  const baseSeos = parseFloat(baseParentRow[2]) || 0;
  const seosGrowth = currentSeos - baseSeos;
  
  if (isPercentRow) {
    const seosPercentGrowth = calculateCorrectGrowthPercent(baseSeos, currentSeos);
    valuesToSet[2] = parseFloat(seosPercentGrowth.replace('%', '')).toFixed(2) + '%'; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    colorsToSet[2] = getGrowthColor(seosGrowth);
  } else {
    valuesToSet[2] = formatNumberWithoutUnnecessaryDecimals(seosGrowth); // –ë–ï–ó .00 –¥–ª—è —Ü–µ–ª—ã—Ö
    colorsToSet[2] = getGrowthColor(seosGrowth);
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
  const additionalColumns = [
    { index: 20, name: 'Deps' },        // T - –î–µ–ø–æ–∑–∏—Ç—ã
    { index: 22, name: 'ExpenseRUB' },  // V - –†–∞—Å—Ö–æ–¥ RUB  
    { index: 32, name: 'RevenueRUB' },  // AF - –í—ã—Ä—É—á–∫–∞ RUB
    { index: 33, name: 'ProfitRUB' }    // AG - –ü—Ä–∏–±—ã–ª—å RUB
  ];
  
  additionalColumns.forEach(col => {
    if (col.index <= 35) { // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–∞—à–µ–≥–æ maxColumn
      const currentValue = parseFloat(currentParentRow[col.index - 1]) || 0;
      const baseValue = parseFloat(baseParentRow[col.index - 1]) || 0;
      const absoluteGrowth = currentValue - baseValue;
      
      if (isPercentRow) {
        const percentGrowth = calculateCorrectGrowthPercent(baseValue, currentValue);
        valuesToSet[col.index - 1] = parseFloat(percentGrowth.replace('%', '')).toFixed(2) + '%';
        colorsToSet[col.index - 1] = getGrowthColor(absoluteGrowth);
      } else {
        valuesToSet[col.index - 1] = formatNumberWithoutUnnecessaryDecimals(absoluteGrowth); // –ë–ï–ó .00 –¥–ª—è —Ü–µ–ª—ã—Ö
        colorsToSet[col.index - 1] = getGrowthColor(absoluteGrowth);
      }
    }
  });
}

/**
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞ (—Å–∞–π—Ç—ã, —Å–µ–æ—à–Ω–∏–∫–∏ –∏ —Ç.–¥.) - –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø
 */
function fillAdditionalGrowthColumns(sheet, rowNumber, currentParentRow, baseParentRow, isPercentRow) {
  // –°—Ç–æ–ª–±–µ—Ü B: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–æ–º
  const currentSites = parseFloat(currentParentRow[1]) || 0;
  const baseSites = parseFloat(baseParentRow[1]) || 0;
  const sitesGrowth = currentSites - baseSites;
  
  if (isPercentRow) {
    const sitesPercentGrowth = calculateCorrectGrowthPercent(baseSites, currentSites);
    sheet.getRange(rowNumber, 2).setValue(parseFloat(sitesPercentGrowth.replace('%', '')).toFixed(2) + '%');
    sheet.getRange(rowNumber, 2).setFontColor(getGrowthColor(sitesGrowth));
  } else {
    sheet.getRange(rowNumber, 2).setValue(formatNumberWithoutUnnecessaryDecimals(sitesGrowth));
    sheet.getRange(rowNumber, 2).setFontColor(getGrowthColor(sitesGrowth));
  }
  
  // –°—Ç–æ–ª–±–µ—Ü C: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–æ—à–Ω–∏–∫–æ–≤
  const currentSeos = parseFloat(currentParentRow[2]) || 0;
  const baseSeos = parseFloat(baseParentRow[2]) || 0;
  const seosGrowth = currentSeos - baseSeos;
  
  if (isPercentRow) {
    const seosPercentGrowth = calculateCorrectGrowthPercent(baseSeos, currentSeos);
    sheet.getRange(rowNumber, 3).setValue(parseFloat(seosPercentGrowth.replace('%', '')).toFixed(2) + '%');
    sheet.getRange(rowNumber, 3).setFontColor(getGrowthColor(seosGrowth));
  } else {
    sheet.getRange(rowNumber, 3).setValue(formatNumberWithoutUnnecessaryDecimals(seosGrowth));
    sheet.getRange(rowNumber, 3).setFontColor(getGrowthColor(seosGrowth));
  }
}

// ========================================================================
// üÜò –§–£–ù–ö–¶–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• "% –û–¢ –û–ë–©–ï–ì–û"
// ========================================================================

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "% –æ—Ç –æ–±—â–µ–≥–æ" 
 * (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞—Ç–µ—Ä—Ç—ã –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–æ—Å—Ç–∞)
 */
function –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ü—Ä–æ—Ü–µ–Ω—Ç—ã–û—Ç–û–±—â–µ–≥–æ() {
  console.log('üÜò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• "% –û–¢ –û–ë–©–ï–ì–û"...');
  
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    const currentMonth = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
    
    if (!currentMonth) {
      throw new Error('–ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    }
    
    // –õ–∏—Å—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const sheetsToRestore = [
      `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${currentMonth}`
    ];
    
    sheetsToRestore.forEach(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      if (!sheet) {
        console.log(`‚ö†Ô∏è –õ–∏—Å—Ç ${sheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }
      
      console.log(`  üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤: ${sheetName}`);
      
      const data = sheet.getDataRange().getValues();
      –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ü—Ä–æ—Ü–µ–Ω—Ç—ã–í–õ–∏—Å—Ç–µ(sheet, data);
      
      console.log(`  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${sheetName}`);
    });
    
    console.log('üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –æ–±—â–µ–≥–æ –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ
 */
function –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ü—Ä–æ—Ü–µ–Ω—Ç—ã–í–õ–∏—Å—Ç–µ(sheet, data) {
  const updates = [];
  
  for (let row = 0; row < data.length; row++) {
    const rowName = data[row][0];
    if (!rowName) continue;
    
    const rowStr = rowName.toString().trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞ - –∏—Ö –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if (rowStr === '–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ' || rowStr === '–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ') {
      continue;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (rowStr === '' || rowStr.includes('–û—Ñ—Ñ–µ—Ä') || 
        rowStr.includes('–°–µ–æ—à–Ω–∏–∫') || rowStr.includes('–ö–ª–∏–∫–∏')) {
      continue;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    const rowData = data[row];
    const rowNumber = row + 1;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    const totals = {
      clicks: parseFloat(rowData[3]) || 0,     // D - –ö–ª–∏–∫–∏
      regs: parseFloat(rowData[7]) || 0,       // H - –†–µ–≥–∏  
      fd: parseFloat(rowData[11]) || 0,        // L - FD
      rd: parseFloat(rowData[15]) || 0,        // P - RD
      expense: parseFloat(rowData[21]) || 0,   // V - –†–∞—Å—Ö–æ–¥
      revenue: parseFloat(rowData[24]) || 0,   // Y - –í—ã—Ä—É—á–∫–∞
      profit: parseFloat(rowData[28]) || 0     // AC - –ü—Ä–∏–±—ã–ª—å
    };
    
    // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ –∏—Ç–æ–≥–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const grandTotals = –Ω–∞–π—Ç–∏–ò—Ç–æ–≥–æ–≤—É—é–°—Ç—Ä–æ–∫—É(data);
    if (!grandTotals) continue;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –æ–±—â–µ–≥–æ
    const percentUpdates = [
      { col: 5, value: grandTotals.clicks > 0 ? (totals.clicks / grandTotals.clicks * 100).toFixed(2) + '%' : '0.00%' },     // E
      { col: 9, value: grandTotals.regs > 0 ? (totals.regs / grandTotals.regs * 100).toFixed(2) + '%' : '0.00%' },          // I
      { col: 13, value: grandTotals.fd > 0 ? (totals.fd / grandTotals.fd * 100).toFixed(2) + '%' : '0.00%' },               // M
      { col: 17, value: grandTotals.rd > 0 ? (totals.rd / grandTotals.rd * 100).toFixed(2) + '%' : '0.00%' },               // Q
      { col: 23, value: grandTotals.expense > 0 ? (totals.expense / grandTotals.expense * 100).toFixed(2) + '%' : '0.00%' }, // W
      { col: 26, value: grandTotals.revenue > 0 ? (totals.revenue / grandTotals.revenue * 100).toFixed(2) + '%' : '0.00%' }, // Z
      { col: 30, value: grandTotals.profit > 0 ? (totals.profit / grandTotals.profit * 100).toFixed(2) + '%' : '0.00%' }     // AD
    ];
    
    percentUpdates.forEach(update => {
      updates.push({
        row: rowNumber,
        col: update.col,
        value: update.value
      });
    });
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  updates.forEach(update => {
    sheet.getRange(update.row, update.col).setValue(update.value);
  });
  
  console.log(`    üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${updates.length} —è—á–µ–µ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏`);
}

/**
 * –ù–∞–π—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É "–í—Å–µ–≥–æ" –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
 */
function –Ω–∞–π—Ç–∏–ò—Ç–æ–≥–æ–≤—É—é–°—Ç—Ä–æ–∫—É(data) {
  for (let i = 0; i < data.length; i++) {
    const rowName = data[i][0];
    if (rowName && rowName.toString().trim() === '–í—Å–µ–≥–æ') {
      return {
        clicks: parseFloat(data[i][3]) || 0,     // D
        regs: parseFloat(data[i][7]) || 0,       // H
        fd: parseFloat(data[i][11]) || 0,        // L
        rd: parseFloat(data[i][15]) || 0,        // P
        expense: parseFloat(data[i][21]) || 0,   // V
        revenue: parseFloat(data[i][24]) || 0,   // Y
        profit: parseFloat(data[i][28]) || 0     // AC
      };
    }
  }
  return null;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function getGrandTotalByConfigName(grandTotals, configName) {
  const mapping = {
    '–ö–ª–∏–∫–∏': 'clicks',
    '–†–µ–≥–∏': 'regs', 
    'FD': 'fd',
    'RD': 'rd',
    '–†–∞—Å—Ö–æ–¥': 'expense',
    '–í—ã—Ä—É—á–∫–∞': 'revenue',
    '–ü—Ä–∏–±—ã–ª—å': 'profit'
  };
  
  const fieldName = mapping[configName];
  return fieldName ? (grandTotals[fieldName] || 0) : 0;
}

// ========================================================================
// üöÄ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –° –ì–û–¢–û–í–´–ú–ò –°–í–û–î–ù–´–ú–ò (–ù–û–í–ê–Ø!)
// ========================================================================

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–æ—Å—Ç –¥–ª—è –£–ñ–ï –ì–û–¢–û–í–´–• —Å–≤–æ–¥–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ö–û–ù–°–¢–ê–ù–¢–´)
 */
function —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å–†–æ—Å—Ç–î–ª—è–ì–æ—Ç–æ–≤—ã—Ö–°–≤–æ–¥–Ω—ã—Ö–ò–∑–ö–æ–Ω—Å—Ç–∞–Ω—Ç() {
  const baseMonth = –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô;
  const currentMonth = –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô;
  
  console.log(`üéØ –†–ê–°–ß–ï–¢ –†–û–°–¢–ê –î–õ–Ø –ì–û–¢–û–í–´–• –°–í–û–î–ù–´–• –ò–ó –ö–û–ù–°–¢–ê–ù–¢: ${baseMonth} ‚Üí ${currentMonth}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
  if (!baseMonth || !currentMonth) {
    throw new Error(`–û–®–ò–ë–ö–ê: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ë–ê–ó–û–í–´–ô="${baseMonth}", –¢–ï–ö–£–©–ò–ô="${currentMonth}"`);
  }
  
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    
    // –õ–∏—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ!)
    const possibleSheets = [
      `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${currentMonth}`
    ];
    
    const existingSheets = possibleSheets.filter(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      return sheet !== null;
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö —Å–≤–æ–¥–Ω—ã—Ö: ${existingSheets.length}`);
    
    if (existingSheets.length === 0) {
      console.log('‚ùå –ì–æ—Ç–æ–≤—ã–µ —Å–≤–æ–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–¥–Ω—ã–µ.');
      return;
    }
    
    existingSheets.forEach(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      console.log(`  üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –¥–ª—è: ${sheetName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const baseSheetName = sheetName.replace(currentMonth, baseMonth);
      const baseSheet = spreadsheet.getSheetByName(baseSheetName);
      
      if (!baseSheet) {
        console.log(`  ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –ª–∏—Å—Ç ${baseSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }
      
      const currentData = sheet.getDataRange().getValues();
      const baseData = baseSheet.getDataRange().getValues();
      
      console.log(`    üî¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞...`);
      processGrowthData(sheet, currentData, baseData);
      
      console.log(`    üìä –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞...`);
      fillGrowthRowsForClusters(sheet, currentData, baseData);
      
      console.log(`    üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...`);
      applyGrowthColorFormatting(sheet, currentData);
      
      console.log(`  ‚úÖ –†–æ—Å—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: ${sheetName}`);
    });
    
    console.log('üéâ –†–ê–°–ß–ï–¢ –†–û–°–¢–ê –î–õ–Ø –ì–û–¢–û–í–´–• –°–í–û–î–ù–´–• –ó–ê–í–ï–†–®–ï–ù!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–æ—Å—Ç–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å–≤–æ–¥–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –§–£–ù–ö–¶–ò–Ø –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–æ—Å—Ç –¥–ª—è –£–ñ–ï –ì–û–¢–û–í–´–• —Å–≤–æ–¥–Ω—ã—Ö (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ—Å—è—Ü—ã)
 */
function —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å–†–æ—Å—Ç–î–ª—è–ì–æ—Ç–æ–≤—ã—Ö–°–≤–æ–¥–Ω—ã—Ö(baseMonth, currentMonth) {
  console.log(`üéØ –†–ê–°–ß–ï–¢ –†–û–°–¢–ê –î–õ–Ø –ì–û–¢–û–í–´–• –°–í–û–î–ù–´–•: ${baseMonth} ‚Üí ${currentMonth}`);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—è—Ü—ã –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô = baseMonth;
  –ú–ï–°–Ø–¶–´.–¢–ï–ö–£–©–ò–ô = currentMonth;
  
  try {
    const spreadsheet = SpreadsheetApp.openById(–¢–ê–ë–õ–ò–¶–´.–†–ï–ó–£–õ–¨–¢–ê–¢);
    
    // –õ–∏—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ!)
    const possibleSheets = [
      `–°–≤–æ–¥–Ω–∞—è –ë—Ä–µ–Ω–¥+–ì–µ–æ ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –ì–ï–û ${currentMonth}`,
      `–°–≤–æ–¥–Ω–∞—è –°–µ–æ—à–Ω–∏–∫–∏ ${currentMonth}`
    ];
    
    const existingSheets = possibleSheets.filter(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      return sheet !== null;
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö —Å–≤–æ–¥–Ω—ã—Ö: ${existingSheets.length}`);
    
    if (existingSheets.length === 0) {
      console.log('‚ùå –ì–æ—Ç–æ–≤—ã–µ —Å–≤–æ–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–¥–Ω—ã–µ.');
      return;
    }
    
    existingSheets.forEach(sheetName => {
      const sheet = spreadsheet.getSheetByName(sheetName);
      console.log(`  üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –¥–ª—è: ${sheetName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const baseSheetName = sheetName.replace(currentMonth, baseMonth);
      const baseSheet = spreadsheet.getSheetByName(baseSheetName);
      
      if (!baseSheet) {
        console.log(`  ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –ª–∏—Å—Ç ${baseSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }
      
      const currentData = sheet.getDataRange().getValues();
      const baseData = baseSheet.getDataRange().getValues();
      
      console.log(`    üî¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å—Ç–∞...`);
      processGrowthData(sheet, currentData, baseData);
      
      console.log(`    üìä –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–æ—Å—Ç–∞...`);
      fillGrowthRowsForClusters(sheet, currentData, baseData);
      
      console.log(`    üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...`);
      applyGrowthColorFormatting(sheet, currentData);
      
      console.log(`  ‚úÖ –†–æ—Å—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: ${sheetName}`);
    });
    
    console.log('üéâ –†–ê–°–ß–ï–¢ –†–û–°–¢–ê –î–õ–Ø –ì–û–¢–û–í–´–• –°–í–û–î–ù–´–• –ó–ê–í–ï–†–®–ï–ù!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–æ—Å—Ç–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —Å–≤–æ–¥–Ω—ã—Ö:', error);
    throw error;
  }
}

console.log('üéØ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ì–û–¢–û–í–ê!');
console.log('üöÄ + –ë–´–°–¢–†–´–ï –§–£–ù–ö–¶–ò–ò –° BATCH-–û–ë–†–ê–ë–û–¢–ö–û–ô –î–û–ë–ê–í–õ–ï–ù–´!');
console.log('üìà + –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –°–¢–†–û–ö –†–û–°–¢–ê –ü–û –ö–õ–ê–°–¢–ï–†–ê–ú –†–ï–ê–õ–ò–ó–û–í–ê–ù–û!');
console.log('üé® + –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –í–°–ï–• –°–¢–û–õ–ë–¶–û–í –í –°–¢–†–û–ö–ê–• –†–û–°–¢–ê –° –ü–û–õ–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô!');
console.log('üèÉ‚Äç‚ôÇÔ∏è + –î–í–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ì–û–¢–û–í–´–ú–ò –°–í–û–î–ù–´–ú–ò:');
console.log('    üìã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å–†–æ—Å—Ç–î–ª—è–ì–æ—Ç–æ–≤—ã—Ö–°–≤–æ–¥–Ω—ã—Ö–ò–∑–ö–æ–Ω—Å—Ç–∞–Ω—Ç() - –∏–∑ –ú–ï–°–Ø–¶–´.–ë–ê–ó–û–í–´–ô/–¢–ï–ö–£–©–ò–ô');
console.log('    ‚öôÔ∏è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å–†–æ—Å—Ç–î–ª—è–ì–æ—Ç–æ–≤—ã—Ö–°–≤–æ–¥–Ω—ã—Ö(base, current) - —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
console.log('‚ö° + –£–°–ö–û–†–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:');
console.log('    üìä –°—Ç–æ–ª–±—Ü—ã "% –æ—Ç –æ–±—â–µ–≥–æ" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ä–æ—Å—Ç–∞');
console.log('    üî¢ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π');
console.log('    üöÄ Batch-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏');
console.log('üÜò + –§–£–ù–ö–¶–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
console.log('    üìã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ü—Ä–æ—Ü–µ–Ω—Ç—ã–û—Ç–û–±—â–µ–≥–æ() - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—Ç–µ—Ä—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
console.log('    üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –æ–±—â–µ–≥–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö');
console.log('üîß + –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ß–ï–¢–ê –ü–†–û–¶–ï–ù–¢–û–í –û–¢ –û–ë–©–ï–ì–û:');
console.log('    üìä –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –û–ë–©–ò–ï –ò–¢–û–ì–ò –ª–∏—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –∏—Ç–æ–≥–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–æ–∫–∏');
console.log('    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–µ–π –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º');
console.log('üõ†Ô∏è + –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:');
console.log('    ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–±–µ–≥–∞–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–π');
console.log('    üî¢ –ß–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö "–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ" —Ç–µ–ø–µ—Ä—å –ë–ï–ó .00 (7278 –≤–º–µ—Å—Ç–æ 7278.00)');
console.log('    üìã –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞');
console.log('    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–æ—Å—Ç–∞: "–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ" (–±–µ–∑ %)');
console.log('üöÄ + –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø BATCH-–û–ë–†–ê–ë–û–¢–ö–ê:');
console.log('    ‚ö° –û–î–ò–ù –≤—ã–∑–æ–≤ setValues() –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ setValue()');
console.log('    üìä –£–±—Ä–∞–Ω—ã –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏');
console.log('    üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –Ω–∞ 1000+ —Å—Ç—Ä–æ–∫');
